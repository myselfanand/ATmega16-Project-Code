
DC_MOTOR_LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000036e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001c  00800060  0000036e  000003e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000003fe  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000430  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  0000046c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000cc0  00000000  00000000  000004bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000673  00000000  00000000  0000117c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004ab  00000000  00000000  000017ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f4  00000000  00000000  00001c9c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000380  00000000  00000000  00001d90  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007c8  00000000  00000000  00002110  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  000028d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e6       	ldi	r30, 0x6E	; 110
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 37       	cpi	r26, 0x7C	; 124
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 84 01 	call	0x308	; 0x308 <main>
  7a:	0c 94 b5 01 	jmp	0x36a	; 0x36a <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <lcd_cmd>:


void lcd_cmd(unsigned char cmd)
{

	PORTB = cmd;
  82:	88 bb       	out	0x18, r24	; 24
	
	PORTA = 0x04;
  84:	84 e0       	ldi	r24, 0x04	; 4
  86:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  88:	8f e2       	ldi	r24, 0x2F	; 47
  8a:	95 e7       	ldi	r25, 0x75	; 117
  8c:	01 97       	sbiw	r24, 0x01	; 1
  8e:	f1 f7       	brne	.-4      	; 0x8c <lcd_cmd+0xa>
  90:	00 c0       	rjmp	.+0      	; 0x92 <lcd_cmd+0x10>
  92:	00 00       	nop
	_delay_ms(10);
	
	PORTA = 0x00;
  94:	1b ba       	out	0x1b, r1	; 27
  96:	8f e2       	ldi	r24, 0x2F	; 47
  98:	95 e7       	ldi	r25, 0x75	; 117
  9a:	01 97       	sbiw	r24, 0x01	; 1
  9c:	f1 f7       	brne	.-4      	; 0x9a <lcd_cmd+0x18>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <lcd_cmd+0x1e>
  a0:	00 00       	nop
  a2:	08 95       	ret

000000a4 <lcd_data>:
}

void lcd_data(unsigned char data)
{
	
	PORTB = data;
  a4:	88 bb       	out	0x18, r24	; 24
	
	PORTA = 0x05;
  a6:	85 e0       	ldi	r24, 0x05	; 5
  a8:	8b bb       	out	0x1b, r24	; 27
  aa:	8f e2       	ldi	r24, 0x2F	; 47
  ac:	95 e7       	ldi	r25, 0x75	; 117
  ae:	01 97       	sbiw	r24, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <lcd_data+0xa>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <lcd_data+0x10>
  b4:	00 00       	nop
	_delay_ms(10);
	
	PORTA = 0X01;
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	8b bb       	out	0x1b, r24	; 27
  ba:	8f e2       	ldi	r24, 0x2F	; 47
  bc:	95 e7       	ldi	r25, 0x75	; 117
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <lcd_data+0x1a>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <lcd_data+0x20>
  c4:	00 00       	nop
  c6:	08 95       	ret

000000c8 <motor_fwd>:
	_delay_ms(10);
}

void motor_fwd()
{
  c8:	0f 93       	push	r16
  ca:	1f 93       	push	r17
  cc:	cf 93       	push	r28
  ce:	df 93       	push	r29
  d0:	cd b7       	in	r28, 0x3d	; 61
  d2:	de b7       	in	r29, 0x3e	; 62
  d4:	28 97       	sbiw	r28, 0x08	; 8
  d6:	0f b6       	in	r0, 0x3f	; 63
  d8:	f8 94       	cli
  da:	de bf       	out	0x3e, r29	; 62
  dc:	0f be       	out	0x3f, r0	; 63
  de:	cd bf       	out	0x3d, r28	; 61
	PORTC = 0x05;	
  e0:	85 e0       	ldi	r24, 0x05	; 5
  e2:	85 bb       	out	0x15, r24	; 21
	
   lcd_cmd(0x01);  //clear screen
  e4:	81 e0       	ldi	r24, 0x01	; 1
  e6:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
  ea:	8f e2       	ldi	r24, 0x2F	; 47
  ec:	95 e7       	ldi	r25, 0x75	; 117
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <motor_fwd+0x26>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <motor_fwd+0x2c>
  f4:	00 00       	nop
   _delay_ms(10);		
	
	int i = 0;
	  char a[] = "FORWARD";
  f6:	88 e0       	ldi	r24, 0x08	; 8
  f8:	e0 e6       	ldi	r30, 0x60	; 96
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	de 01       	movw	r26, r28
  fe:	11 96       	adiw	r26, 0x01	; 1
 100:	01 90       	ld	r0, Z+
 102:	0d 92       	st	X+, r0
 104:	8a 95       	dec	r24
 106:	e1 f7       	brne	.-8      	; 0x100 <motor_fwd+0x38>
	PORTC = 0x05;	
	
   lcd_cmd(0x01);  //clear screen
   _delay_ms(10);		
	
	int i = 0;
 108:	00 e0       	ldi	r16, 0x00	; 0
 10a:	10 e0       	ldi	r17, 0x00	; 0
	  char a[] = "FORWARD";
	  
	  while(a[i] != '\0')
 10c:	0a c0       	rjmp	.+20     	; 0x122 <motor_fwd+0x5a>
	  {
		  lcd_data(a[i]);
 10e:	0e 94 52 00 	call	0xa4	; 0xa4 <lcd_data>
		  i++;
 112:	0f 5f       	subi	r16, 0xFF	; 255
 114:	1f 4f       	sbci	r17, 0xFF	; 255
 116:	8f e2       	ldi	r24, 0x2F	; 47
 118:	95 e7       	ldi	r25, 0x75	; 117
 11a:	01 97       	sbiw	r24, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <motor_fwd+0x52>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <motor_fwd+0x58>
 120:	00 00       	nop
   _delay_ms(10);		
	
	int i = 0;
	  char a[] = "FORWARD";
	  
	  while(a[i] != '\0')
 122:	e1 e0       	ldi	r30, 0x01	; 1
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	ec 0f       	add	r30, r28
 128:	fd 1f       	adc	r31, r29
 12a:	e0 0f       	add	r30, r16
 12c:	f1 1f       	adc	r31, r17
 12e:	80 81       	ld	r24, Z
 130:	81 11       	cpse	r24, r1
 132:	ed cf       	rjmp	.-38     	; 0x10e <motor_fwd+0x46>
 134:	9f ef       	ldi	r25, 0xFF	; 255
 136:	2c ed       	ldi	r18, 0xDC	; 220
 138:	8d e6       	ldi	r24, 0x6D	; 109
 13a:	91 50       	subi	r25, 0x01	; 1
 13c:	20 40       	sbci	r18, 0x00	; 0
 13e:	80 40       	sbci	r24, 0x00	; 0
 140:	e1 f7       	brne	.-8      	; 0x13a <motor_fwd+0x72>
 142:	00 c0       	rjmp	.+0      	; 0x144 <motor_fwd+0x7c>
 144:	00 00       	nop
		  lcd_data(a[i]);
		  i++;
		  _delay_ms(10);
	  }
	  _delay_ms(3000);
}
 146:	28 96       	adiw	r28, 0x08	; 8
 148:	0f b6       	in	r0, 0x3f	; 63
 14a:	f8 94       	cli
 14c:	de bf       	out	0x3e, r29	; 62
 14e:	0f be       	out	0x3f, r0	; 63
 150:	cd bf       	out	0x3d, r28	; 61
 152:	df 91       	pop	r29
 154:	cf 91       	pop	r28
 156:	1f 91       	pop	r17
 158:	0f 91       	pop	r16
 15a:	08 95       	ret

0000015c <motor_bwd>:

void motor_bwd()
{
 15c:	0f 93       	push	r16
 15e:	1f 93       	push	r17
 160:	cf 93       	push	r28
 162:	df 93       	push	r29
 164:	cd b7       	in	r28, 0x3d	; 61
 166:	de b7       	in	r29, 0x3e	; 62
 168:	29 97       	sbiw	r28, 0x09	; 9
 16a:	0f b6       	in	r0, 0x3f	; 63
 16c:	f8 94       	cli
 16e:	de bf       	out	0x3e, r29	; 62
 170:	0f be       	out	0x3f, r0	; 63
 172:	cd bf       	out	0x3d, r28	; 61
	PORTC = 0x0A;
 174:	8a e0       	ldi	r24, 0x0A	; 10
 176:	85 bb       	out	0x15, r24	; 21
	
	lcd_cmd(0x01);  //clear screen
 178:	81 e0       	ldi	r24, 0x01	; 1
 17a:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
 17e:	8f e2       	ldi	r24, 0x2F	; 47
 180:	95 e7       	ldi	r25, 0x75	; 117
 182:	01 97       	sbiw	r24, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <motor_bwd+0x26>
 186:	00 c0       	rjmp	.+0      	; 0x188 <motor_bwd+0x2c>
 188:	00 00       	nop
	_delay_ms(10);
	
	int i = 0;
	char a[] = "BACKWARD";
 18a:	89 e0       	ldi	r24, 0x09	; 9
 18c:	e8 e6       	ldi	r30, 0x68	; 104
 18e:	f0 e0       	ldi	r31, 0x00	; 0
 190:	de 01       	movw	r26, r28
 192:	11 96       	adiw	r26, 0x01	; 1
 194:	01 90       	ld	r0, Z+
 196:	0d 92       	st	X+, r0
 198:	8a 95       	dec	r24
 19a:	e1 f7       	brne	.-8      	; 0x194 <motor_bwd+0x38>
	PORTC = 0x0A;
	
	lcd_cmd(0x01);  //clear screen
	_delay_ms(10);
	
	int i = 0;
 19c:	00 e0       	ldi	r16, 0x00	; 0
 19e:	10 e0       	ldi	r17, 0x00	; 0
	char a[] = "BACKWARD";
	
	while(a[i] != '\0')
 1a0:	0a c0       	rjmp	.+20     	; 0x1b6 <motor_bwd+0x5a>
	{
		lcd_data(a[i]);
 1a2:	0e 94 52 00 	call	0xa4	; 0xa4 <lcd_data>
		i++;
 1a6:	0f 5f       	subi	r16, 0xFF	; 255
 1a8:	1f 4f       	sbci	r17, 0xFF	; 255
 1aa:	8f e2       	ldi	r24, 0x2F	; 47
 1ac:	95 e7       	ldi	r25, 0x75	; 117
 1ae:	01 97       	sbiw	r24, 0x01	; 1
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <motor_bwd+0x52>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <motor_bwd+0x58>
 1b4:	00 00       	nop
	_delay_ms(10);
	
	int i = 0;
	char a[] = "BACKWARD";
	
	while(a[i] != '\0')
 1b6:	e1 e0       	ldi	r30, 0x01	; 1
 1b8:	f0 e0       	ldi	r31, 0x00	; 0
 1ba:	ec 0f       	add	r30, r28
 1bc:	fd 1f       	adc	r31, r29
 1be:	e0 0f       	add	r30, r16
 1c0:	f1 1f       	adc	r31, r17
 1c2:	80 81       	ld	r24, Z
 1c4:	81 11       	cpse	r24, r1
 1c6:	ed cf       	rjmp	.-38     	; 0x1a2 <motor_bwd+0x46>
 1c8:	9f ef       	ldi	r25, 0xFF	; 255
 1ca:	2c ed       	ldi	r18, 0xDC	; 220
 1cc:	8d e6       	ldi	r24, 0x6D	; 109
 1ce:	91 50       	subi	r25, 0x01	; 1
 1d0:	20 40       	sbci	r18, 0x00	; 0
 1d2:	80 40       	sbci	r24, 0x00	; 0
 1d4:	e1 f7       	brne	.-8      	; 0x1ce <motor_bwd+0x72>
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <motor_bwd+0x7c>
 1d8:	00 00       	nop
		lcd_data(a[i]);
		i++;
		_delay_ms(10);
	}
	_delay_ms(3000);
}
 1da:	29 96       	adiw	r28, 0x09	; 9
 1dc:	0f b6       	in	r0, 0x3f	; 63
 1de:	f8 94       	cli
 1e0:	de bf       	out	0x3e, r29	; 62
 1e2:	0f be       	out	0x3f, r0	; 63
 1e4:	cd bf       	out	0x3d, r28	; 61
 1e6:	df 91       	pop	r29
 1e8:	cf 91       	pop	r28
 1ea:	1f 91       	pop	r17
 1ec:	0f 91       	pop	r16
 1ee:	08 95       	ret

000001f0 <motor_right>:

void motor_right()
{
 1f0:	0f 93       	push	r16
 1f2:	1f 93       	push	r17
 1f4:	cf 93       	push	r28
 1f6:	df 93       	push	r29
 1f8:	00 d0       	rcall	.+0      	; 0x1fa <motor_right+0xa>
 1fa:	00 d0       	rcall	.+0      	; 0x1fc <motor_right+0xc>
 1fc:	00 d0       	rcall	.+0      	; 0x1fe <motor_right+0xe>
 1fe:	cd b7       	in	r28, 0x3d	; 61
 200:	de b7       	in	r29, 0x3e	; 62
	PORTC = 0x01;
 202:	81 e0       	ldi	r24, 0x01	; 1
 204:	85 bb       	out	0x15, r24	; 21
	
	lcd_cmd(0x01);  //clear screen
 206:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
 20a:	8f e2       	ldi	r24, 0x2F	; 47
 20c:	95 e7       	ldi	r25, 0x75	; 117
 20e:	01 97       	sbiw	r24, 0x01	; 1
 210:	f1 f7       	brne	.-4      	; 0x20e <__EEPROM_REGION_LENGTH__+0xe>
 212:	00 c0       	rjmp	.+0      	; 0x214 <__EEPROM_REGION_LENGTH__+0x14>
 214:	00 00       	nop
	_delay_ms(10);
	
	int i = 0;
	char a[] = "RIGHT";
 216:	86 e0       	ldi	r24, 0x06	; 6
 218:	e1 e7       	ldi	r30, 0x71	; 113
 21a:	f0 e0       	ldi	r31, 0x00	; 0
 21c:	de 01       	movw	r26, r28
 21e:	11 96       	adiw	r26, 0x01	; 1
 220:	01 90       	ld	r0, Z+
 222:	0d 92       	st	X+, r0
 224:	8a 95       	dec	r24
 226:	e1 f7       	brne	.-8      	; 0x220 <__EEPROM_REGION_LENGTH__+0x20>
	PORTC = 0x01;
	
	lcd_cmd(0x01);  //clear screen
	_delay_ms(10);
	
	int i = 0;
 228:	00 e0       	ldi	r16, 0x00	; 0
 22a:	10 e0       	ldi	r17, 0x00	; 0
	char a[] = "RIGHT";
	
	while(a[i] != '\0')
 22c:	0a c0       	rjmp	.+20     	; 0x242 <__EEPROM_REGION_LENGTH__+0x42>
	{
		lcd_data(a[i]);
 22e:	0e 94 52 00 	call	0xa4	; 0xa4 <lcd_data>
		i++;
 232:	0f 5f       	subi	r16, 0xFF	; 255
 234:	1f 4f       	sbci	r17, 0xFF	; 255
 236:	8f e2       	ldi	r24, 0x2F	; 47
 238:	95 e7       	ldi	r25, 0x75	; 117
 23a:	01 97       	sbiw	r24, 0x01	; 1
 23c:	f1 f7       	brne	.-4      	; 0x23a <__EEPROM_REGION_LENGTH__+0x3a>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <__EEPROM_REGION_LENGTH__+0x40>
 240:	00 00       	nop
	_delay_ms(10);
	
	int i = 0;
	char a[] = "RIGHT";
	
	while(a[i] != '\0')
 242:	e1 e0       	ldi	r30, 0x01	; 1
 244:	f0 e0       	ldi	r31, 0x00	; 0
 246:	ec 0f       	add	r30, r28
 248:	fd 1f       	adc	r31, r29
 24a:	e0 0f       	add	r30, r16
 24c:	f1 1f       	adc	r31, r17
 24e:	80 81       	ld	r24, Z
 250:	81 11       	cpse	r24, r1
 252:	ed cf       	rjmp	.-38     	; 0x22e <__EEPROM_REGION_LENGTH__+0x2e>
 254:	9f ef       	ldi	r25, 0xFF	; 255
 256:	2c ed       	ldi	r18, 0xDC	; 220
 258:	8d e6       	ldi	r24, 0x6D	; 109
 25a:	91 50       	subi	r25, 0x01	; 1
 25c:	20 40       	sbci	r18, 0x00	; 0
 25e:	80 40       	sbci	r24, 0x00	; 0
 260:	e1 f7       	brne	.-8      	; 0x25a <__EEPROM_REGION_LENGTH__+0x5a>
 262:	00 c0       	rjmp	.+0      	; 0x264 <__EEPROM_REGION_LENGTH__+0x64>
 264:	00 00       	nop
		lcd_data(a[i]);
		i++;
		_delay_ms(10);
	}
	_delay_ms(3000);	
}
 266:	26 96       	adiw	r28, 0x06	; 6
 268:	0f b6       	in	r0, 0x3f	; 63
 26a:	f8 94       	cli
 26c:	de bf       	out	0x3e, r29	; 62
 26e:	0f be       	out	0x3f, r0	; 63
 270:	cd bf       	out	0x3d, r28	; 61
 272:	df 91       	pop	r29
 274:	cf 91       	pop	r28
 276:	1f 91       	pop	r17
 278:	0f 91       	pop	r16
 27a:	08 95       	ret

0000027c <motor_left>:

void motor_left()
{
 27c:	0f 93       	push	r16
 27e:	1f 93       	push	r17
 280:	cf 93       	push	r28
 282:	df 93       	push	r29
 284:	00 d0       	rcall	.+0      	; 0x286 <motor_left+0xa>
 286:	00 d0       	rcall	.+0      	; 0x288 <motor_left+0xc>
 288:	1f 92       	push	r1
 28a:	cd b7       	in	r28, 0x3d	; 61
 28c:	de b7       	in	r29, 0x3e	; 62
	PORTC = 0x08;
 28e:	88 e0       	ldi	r24, 0x08	; 8
 290:	85 bb       	out	0x15, r24	; 21
	
   lcd_cmd(0x01);  //clear screen
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
 298:	8f e2       	ldi	r24, 0x2F	; 47
 29a:	95 e7       	ldi	r25, 0x75	; 117
 29c:	01 97       	sbiw	r24, 0x01	; 1
 29e:	f1 f7       	brne	.-4      	; 0x29c <motor_left+0x20>
 2a0:	00 c0       	rjmp	.+0      	; 0x2a2 <motor_left+0x26>
 2a2:	00 00       	nop
   _delay_ms(10);
		
	int i = 0;
	char a[] = "LEFT";
 2a4:	85 e0       	ldi	r24, 0x05	; 5
 2a6:	e7 e7       	ldi	r30, 0x77	; 119
 2a8:	f0 e0       	ldi	r31, 0x00	; 0
 2aa:	de 01       	movw	r26, r28
 2ac:	11 96       	adiw	r26, 0x01	; 1
 2ae:	01 90       	ld	r0, Z+
 2b0:	0d 92       	st	X+, r0
 2b2:	8a 95       	dec	r24
 2b4:	e1 f7       	brne	.-8      	; 0x2ae <motor_left+0x32>
	PORTC = 0x08;
	
   lcd_cmd(0x01);  //clear screen
   _delay_ms(10);
		
	int i = 0;
 2b6:	00 e0       	ldi	r16, 0x00	; 0
 2b8:	10 e0       	ldi	r17, 0x00	; 0
	char a[] = "LEFT";
	
	while(a[i] != '\0')
 2ba:	0a c0       	rjmp	.+20     	; 0x2d0 <motor_left+0x54>
	{
		lcd_data(a[i]);
 2bc:	0e 94 52 00 	call	0xa4	; 0xa4 <lcd_data>
		i++;
 2c0:	0f 5f       	subi	r16, 0xFF	; 255
 2c2:	1f 4f       	sbci	r17, 0xFF	; 255
 2c4:	8f e2       	ldi	r24, 0x2F	; 47
 2c6:	95 e7       	ldi	r25, 0x75	; 117
 2c8:	01 97       	sbiw	r24, 0x01	; 1
 2ca:	f1 f7       	brne	.-4      	; 0x2c8 <motor_left+0x4c>
 2cc:	00 c0       	rjmp	.+0      	; 0x2ce <motor_left+0x52>
 2ce:	00 00       	nop
   _delay_ms(10);
		
	int i = 0;
	char a[] = "LEFT";
	
	while(a[i] != '\0')
 2d0:	e1 e0       	ldi	r30, 0x01	; 1
 2d2:	f0 e0       	ldi	r31, 0x00	; 0
 2d4:	ec 0f       	add	r30, r28
 2d6:	fd 1f       	adc	r31, r29
 2d8:	e0 0f       	add	r30, r16
 2da:	f1 1f       	adc	r31, r17
 2dc:	80 81       	ld	r24, Z
 2de:	81 11       	cpse	r24, r1
 2e0:	ed cf       	rjmp	.-38     	; 0x2bc <motor_left+0x40>
 2e2:	9f ef       	ldi	r25, 0xFF	; 255
 2e4:	2c ed       	ldi	r18, 0xDC	; 220
 2e6:	8d e6       	ldi	r24, 0x6D	; 109
 2e8:	91 50       	subi	r25, 0x01	; 1
 2ea:	20 40       	sbci	r18, 0x00	; 0
 2ec:	80 40       	sbci	r24, 0x00	; 0
 2ee:	e1 f7       	brne	.-8      	; 0x2e8 <motor_left+0x6c>
 2f0:	00 c0       	rjmp	.+0      	; 0x2f2 <motor_left+0x76>
 2f2:	00 00       	nop
		i++;
		_delay_ms(10);
	}
	_delay_ms(3000);
	
}
 2f4:	0f 90       	pop	r0
 2f6:	0f 90       	pop	r0
 2f8:	0f 90       	pop	r0
 2fa:	0f 90       	pop	r0
 2fc:	0f 90       	pop	r0
 2fe:	df 91       	pop	r29
 300:	cf 91       	pop	r28
 302:	1f 91       	pop	r17
 304:	0f 91       	pop	r16
 306:	08 95       	ret

00000308 <main>:


int main(void)
{
	/* Replace with your application code */
	DDRA = 0xFF;
 308:	8f ef       	ldi	r24, 0xFF	; 255
 30a:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xFF;	
 30c:	87 bb       	out	0x17, r24	; 23
	DDRC = 0xFF;
 30e:	84 bb       	out	0x14, r24	; 20
	
	
	lcd_cmd(0x38); //initialize the LCD
 310:	88 e3       	ldi	r24, 0x38	; 56
 312:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
 316:	8f e2       	ldi	r24, 0x2F	; 47
 318:	95 e7       	ldi	r25, 0x75	; 117
 31a:	01 97       	sbiw	r24, 0x01	; 1
 31c:	f1 f7       	brne	.-4      	; 0x31a <main+0x12>
 31e:	00 c0       	rjmp	.+0      	; 0x320 <main+0x18>
 320:	00 00       	nop
	_delay_ms(10);
	
	lcd_cmd(0x0E); // displaying on cursor
 322:	8e e0       	ldi	r24, 0x0E	; 14
 324:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
 328:	8f e2       	ldi	r24, 0x2F	; 47
 32a:	95 e7       	ldi	r25, 0x75	; 117
 32c:	01 97       	sbiw	r24, 0x01	; 1
 32e:	f1 f7       	brne	.-4      	; 0x32c <main+0x24>
 330:	00 c0       	rjmp	.+0      	; 0x332 <main+0x2a>
 332:	00 00       	nop
	_delay_ms(10);
	
	lcd_cmd(0x01);  //clear screen
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
 33a:	8f e2       	ldi	r24, 0x2F	; 47
 33c:	95 e7       	ldi	r25, 0x75	; 117
 33e:	01 97       	sbiw	r24, 0x01	; 1
 340:	f1 f7       	brne	.-4      	; 0x33e <main+0x36>
 342:	00 c0       	rjmp	.+0      	; 0x344 <main+0x3c>
 344:	00 00       	nop
	_delay_ms(10);
	
	lcd_cmd(0x80); // start cursor at beginning
 346:	80 e8       	ldi	r24, 0x80	; 128
 348:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
 34c:	8f e2       	ldi	r24, 0x2F	; 47
 34e:	95 e7       	ldi	r25, 0x75	; 117
 350:	01 97       	sbiw	r24, 0x01	; 1
 352:	f1 f7       	brne	.-4      	; 0x350 <main+0x48>
 354:	00 c0       	rjmp	.+0      	; 0x356 <main+0x4e>
 356:	00 00       	nop
	_delay_ms(10);
	
	while(1)
	{		
	 motor_fwd();	 	  
 358:	0e 94 64 00 	call	0xc8	; 0xc8 <motor_fwd>
	 motor_bwd();		 
 35c:	0e 94 ae 00 	call	0x15c	; 0x15c <motor_bwd>
	 motor_right();
 360:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <motor_right>
	 motor_left();	 	
 364:	0e 94 3e 01 	call	0x27c	; 0x27c <motor_left>
 368:	f7 cf       	rjmp	.-18     	; 0x358 <main+0x50>

0000036a <_exit>:
 36a:	f8 94       	cli

0000036c <__stop_program>:
 36c:	ff cf       	rjmp	.-2      	; 0x36c <__stop_program>
