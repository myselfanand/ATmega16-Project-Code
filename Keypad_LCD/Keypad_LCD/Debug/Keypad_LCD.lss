
Keypad_LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000280  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000304  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000340  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c9a  00000000  00000000  00000388  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000064e  00000000  00000000  00001022  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004a4  00000000  00000000  00001670  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  00001b14  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000363  00000000  00000000  00001b88  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005b2  00000000  00000000  00001eeb  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  0000249d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 05 01 	call	0x20a	; 0x20a <main>
  64:	0c 94 3e 01 	jmp	0x27c	; 0x27c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <lcd_cmd>:

	
void lcd_cmd(unsigned char cmd)
{

		PORTB = cmd;
  6c:	88 bb       	out	0x18, r24	; 24
		
		PORTA = 0x04;
  6e:	84 e0       	ldi	r24, 0x04	; 4
  70:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  72:	8f e2       	ldi	r24, 0x2F	; 47
  74:	95 e7       	ldi	r25, 0x75	; 117
  76:	01 97       	sbiw	r24, 0x01	; 1
  78:	f1 f7       	brne	.-4      	; 0x76 <lcd_cmd+0xa>
  7a:	00 c0       	rjmp	.+0      	; 0x7c <lcd_cmd+0x10>
  7c:	00 00       	nop
		_delay_ms(10);
		
		PORTA = 0x00;
  7e:	1b ba       	out	0x1b, r1	; 27
  80:	8f e2       	ldi	r24, 0x2F	; 47
  82:	95 e7       	ldi	r25, 0x75	; 117
  84:	01 97       	sbiw	r24, 0x01	; 1
  86:	f1 f7       	brne	.-4      	; 0x84 <lcd_cmd+0x18>
  88:	00 c0       	rjmp	.+0      	; 0x8a <lcd_cmd+0x1e>
  8a:	00 00       	nop
  8c:	08 95       	ret

0000008e <lcd_data>:
{
   
   //lcd_cmd(0x01);  // clear screen
  // _delay_ms(10);

	PORTB = data;
  8e:	88 bb       	out	0x18, r24	; 24
	
	PORTA = 0x05;
  90:	85 e0       	ldi	r24, 0x05	; 5
  92:	8b bb       	out	0x1b, r24	; 27
  94:	8f e2       	ldi	r24, 0x2F	; 47
  96:	95 e7       	ldi	r25, 0x75	; 117
  98:	01 97       	sbiw	r24, 0x01	; 1
  9a:	f1 f7       	brne	.-4      	; 0x98 <lcd_data+0xa>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <lcd_data+0x10>
  9e:	00 00       	nop
	_delay_ms(10);
	
	PORTA = 0X01;
  a0:	81 e0       	ldi	r24, 0x01	; 1
  a2:	8b bb       	out	0x1b, r24	; 27
  a4:	8f e2       	ldi	r24, 0x2F	; 47
  a6:	95 e7       	ldi	r25, 0x75	; 117
  a8:	01 97       	sbiw	r24, 0x01	; 1
  aa:	f1 f7       	brne	.-4      	; 0xa8 <lcd_data+0x1a>
  ac:	00 c0       	rjmp	.+0      	; 0xae <lcd_data+0x20>
  ae:	00 00       	nop
  b0:	08 95       	ret

000000b2 <column_1>:
}

	
	void column_1()
	{
		PORTC = 0x04;
  b2:	84 e0       	ldi	r24, 0x04	; 4
  b4:	85 bb       	out	0x15, r24	; 21
		
		if(PIND & 0x01)
  b6:	80 9b       	sbis	0x10, 0	; 16
  b8:	0c c0       	rjmp	.+24     	; 0xd2 <column_1+0x20>
		{
			PORTA = 0x01;
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	8b bb       	out	0x1b, r24	; 27
			lcd_data('A');
  be:	81 e4       	ldi	r24, 0x41	; 65
  c0:	0e 94 47 00 	call	0x8e	; 0x8e <lcd_data>
  c4:	8f e2       	ldi	r24, 0x2F	; 47
  c6:	95 e7       	ldi	r25, 0x75	; 117
  c8:	01 97       	sbiw	r24, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <column_1+0x16>
  cc:	00 c0       	rjmp	.+0      	; 0xce <column_1+0x1c>
  ce:	00 00       	nop
  d0:	08 95       	ret
			_delay_ms(10);			
			
		}
		
		else if(PIND & 0x02)
  d2:	81 9b       	sbis	0x10, 1	; 16
  d4:	0c c0       	rjmp	.+24     	; 0xee <column_1+0x3c>
		{
			PORTA = 0x08;			
  d6:	88 e0       	ldi	r24, 0x08	; 8
  d8:	8b bb       	out	0x1b, r24	; 27
			lcd_data('D');
  da:	84 e4       	ldi	r24, 0x44	; 68
  dc:	0e 94 47 00 	call	0x8e	; 0x8e <lcd_data>
  e0:	8f e2       	ldi	r24, 0x2F	; 47
  e2:	95 e7       	ldi	r25, 0x75	; 117
  e4:	01 97       	sbiw	r24, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <column_1+0x32>
  e8:	00 c0       	rjmp	.+0      	; 0xea <column_1+0x38>
  ea:	00 00       	nop
  ec:	08 95       	ret
			_delay_ms(10);
		}
		
		else if(PIND & 0x04)
  ee:	82 9b       	sbis	0x10, 2	; 16
  f0:	0c c0       	rjmp	.+24     	; 0x10a <column_1+0x58>
		{
			PORTA = 0x40;			
  f2:	80 e4       	ldi	r24, 0x40	; 64
  f4:	8b bb       	out	0x1b, r24	; 27
			lcd_data('G');
  f6:	87 e4       	ldi	r24, 0x47	; 71
  f8:	0e 94 47 00 	call	0x8e	; 0x8e <lcd_data>
  fc:	8f e2       	ldi	r24, 0x2F	; 47
  fe:	95 e7       	ldi	r25, 0x75	; 117
 100:	01 97       	sbiw	r24, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <column_1+0x4e>
 104:	00 c0       	rjmp	.+0      	; 0x106 <column_1+0x54>
 106:	00 00       	nop
 108:	08 95       	ret
			_delay_ms(10);
		}
		
		else if(PIND & 0x08)
 10a:	83 9b       	sbis	0x10, 3	; 16
 10c:	0b c0       	rjmp	.+22     	; 0x124 <column_1+0x72>
		{
			PORTA ='*';
 10e:	8a e2       	ldi	r24, 0x2A	; 42
 110:	8b bb       	out	0x1b, r24	; 27
			lcd_data('J');
 112:	8a e4       	ldi	r24, 0x4A	; 74
 114:	0e 94 47 00 	call	0x8e	; 0x8e <lcd_data>
 118:	8f e2       	ldi	r24, 0x2F	; 47
 11a:	95 e7       	ldi	r25, 0x75	; 117
 11c:	01 97       	sbiw	r24, 0x01	; 1
 11e:	f1 f7       	brne	.-4      	; 0x11c <column_1+0x6a>
 120:	00 c0       	rjmp	.+0      	; 0x122 <column_1+0x70>
 122:	00 00       	nop
 124:	08 95       	ret

00000126 <column_2>:
		
	}
	
	void column_2()
	{
		PORTC = 0x02;
 126:	82 e0       	ldi	r24, 0x02	; 2
 128:	85 bb       	out	0x15, r24	; 21
		
		if(PIND & 0x01)
 12a:	80 9b       	sbis	0x10, 0	; 16
 12c:	0b c0       	rjmp	.+22     	; 0x144 <column_2+0x1e>
		{
			PORTA = 0x02;
 12e:	8b bb       	out	0x1b, r24	; 27
			lcd_data('B');
 130:	82 e4       	ldi	r24, 0x42	; 66
 132:	0e 94 47 00 	call	0x8e	; 0x8e <lcd_data>
 136:	8f e2       	ldi	r24, 0x2F	; 47
 138:	95 e7       	ldi	r25, 0x75	; 117
 13a:	01 97       	sbiw	r24, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <column_2+0x14>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <column_2+0x1a>
 140:	00 00       	nop
 142:	08 95       	ret
			_delay_ms(10);
			
		}
		
		else if(PIND & 0x02)
 144:	81 9b       	sbis	0x10, 1	; 16
 146:	0c c0       	rjmp	.+24     	; 0x160 <column_2+0x3a>
		{
			PORTA = 0x10;
 148:	80 e1       	ldi	r24, 0x10	; 16
 14a:	8b bb       	out	0x1b, r24	; 27
			lcd_data('E');
 14c:	85 e4       	ldi	r24, 0x45	; 69
 14e:	0e 94 47 00 	call	0x8e	; 0x8e <lcd_data>
 152:	8f e2       	ldi	r24, 0x2F	; 47
 154:	95 e7       	ldi	r25, 0x75	; 117
 156:	01 97       	sbiw	r24, 0x01	; 1
 158:	f1 f7       	brne	.-4      	; 0x156 <column_2+0x30>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <column_2+0x36>
 15c:	00 00       	nop
 15e:	08 95       	ret
			_delay_ms(10);
			
		}
		
		else if(PIND & 0x04)
 160:	82 9b       	sbis	0x10, 2	; 16
 162:	0c c0       	rjmp	.+24     	; 0x17c <column_2+0x56>
		{
			PORTA = 0x80;
 164:	80 e8       	ldi	r24, 0x80	; 128
 166:	8b bb       	out	0x1b, r24	; 27
			lcd_data('H');
 168:	88 e4       	ldi	r24, 0x48	; 72
 16a:	0e 94 47 00 	call	0x8e	; 0x8e <lcd_data>
 16e:	8f e2       	ldi	r24, 0x2F	; 47
 170:	95 e7       	ldi	r25, 0x75	; 117
 172:	01 97       	sbiw	r24, 0x01	; 1
 174:	f1 f7       	brne	.-4      	; 0x172 <column_2+0x4c>
 176:	00 c0       	rjmp	.+0      	; 0x178 <column_2+0x52>
 178:	00 00       	nop
 17a:	08 95       	ret
			_delay_ms(10);
			
		}
		
		else if(PIND & 0x08)
 17c:	83 9b       	sbis	0x10, 3	; 16
 17e:	0a c0       	rjmp	.+20     	; 0x194 <column_2+0x6e>
		{
			PORTA = 0x00;
 180:	1b ba       	out	0x1b, r1	; 27
			lcd_data('K');
 182:	8b e4       	ldi	r24, 0x4B	; 75
 184:	0e 94 47 00 	call	0x8e	; 0x8e <lcd_data>
 188:	8f e2       	ldi	r24, 0x2F	; 47
 18a:	95 e7       	ldi	r25, 0x75	; 117
 18c:	01 97       	sbiw	r24, 0x01	; 1
 18e:	f1 f7       	brne	.-4      	; 0x18c <column_2+0x66>
 190:	00 c0       	rjmp	.+0      	; 0x192 <column_2+0x6c>
 192:	00 00       	nop
 194:	08 95       	ret

00000196 <column_3>:
	}
	
	void column_3()
	{
		
		PORTC = 0x01;
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	85 bb       	out	0x15, r24	; 21
		
		if(PIND & 0x01)
 19a:	80 9b       	sbis	0x10, 0	; 16
 19c:	0c c0       	rjmp	.+24     	; 0x1b6 <column_3+0x20>
		{
			PORTA = 0x04;
 19e:	84 e0       	ldi	r24, 0x04	; 4
 1a0:	8b bb       	out	0x1b, r24	; 27
			lcd_data('C');
 1a2:	83 e4       	ldi	r24, 0x43	; 67
 1a4:	0e 94 47 00 	call	0x8e	; 0x8e <lcd_data>
 1a8:	8f e2       	ldi	r24, 0x2F	; 47
 1aa:	95 e7       	ldi	r25, 0x75	; 117
 1ac:	01 97       	sbiw	r24, 0x01	; 1
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <column_3+0x16>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <column_3+0x1c>
 1b2:	00 00       	nop
 1b4:	08 95       	ret
			_delay_ms(10);
			
		}
		
		else if(PIND & 0x02)
 1b6:	81 9b       	sbis	0x10, 1	; 16
 1b8:	0c c0       	rjmp	.+24     	; 0x1d2 <column_3+0x3c>
		{
			PORTA = 0x20;
 1ba:	80 e2       	ldi	r24, 0x20	; 32
 1bc:	8b bb       	out	0x1b, r24	; 27
			lcd_data('F');
 1be:	86 e4       	ldi	r24, 0x46	; 70
 1c0:	0e 94 47 00 	call	0x8e	; 0x8e <lcd_data>
 1c4:	8f e2       	ldi	r24, 0x2F	; 47
 1c6:	95 e7       	ldi	r25, 0x75	; 117
 1c8:	01 97       	sbiw	r24, 0x01	; 1
 1ca:	f1 f7       	brne	.-4      	; 0x1c8 <column_3+0x32>
 1cc:	00 c0       	rjmp	.+0      	; 0x1ce <column_3+0x38>
 1ce:	00 00       	nop
 1d0:	08 95       	ret
			_delay_ms(10);
			
		}
		
		else if(PIND & 0x04)
 1d2:	82 9b       	sbis	0x10, 2	; 16
 1d4:	0c c0       	rjmp	.+24     	; 0x1ee <column_3+0x58>
		{
			PORTB = 0xC0;
 1d6:	80 ec       	ldi	r24, 0xC0	; 192
 1d8:	88 bb       	out	0x18, r24	; 24
			lcd_data('I');
 1da:	89 e4       	ldi	r24, 0x49	; 73
 1dc:	0e 94 47 00 	call	0x8e	; 0x8e <lcd_data>
 1e0:	8f e2       	ldi	r24, 0x2F	; 47
 1e2:	95 e7       	ldi	r25, 0x75	; 117
 1e4:	01 97       	sbiw	r24, 0x01	; 1
 1e6:	f1 f7       	brne	.-4      	; 0x1e4 <column_3+0x4e>
 1e8:	00 c0       	rjmp	.+0      	; 0x1ea <column_3+0x54>
 1ea:	00 00       	nop
 1ec:	08 95       	ret
			_delay_ms(10);
			
		}
		
		else if(PIND & 0x08)
 1ee:	83 9b       	sbis	0x10, 3	; 16
 1f0:	0b c0       	rjmp	.+22     	; 0x208 <__EEPROM_REGION_LENGTH__+0x8>
		{
			PORTA = '#';
 1f2:	83 e2       	ldi	r24, 0x23	; 35
 1f4:	8b bb       	out	0x1b, r24	; 27
			lcd_data('L');
 1f6:	8c e4       	ldi	r24, 0x4C	; 76
 1f8:	0e 94 47 00 	call	0x8e	; 0x8e <lcd_data>
 1fc:	8f e2       	ldi	r24, 0x2F	; 47
 1fe:	95 e7       	ldi	r25, 0x75	; 117
 200:	01 97       	sbiw	r24, 0x01	; 1
 202:	f1 f7       	brne	.-4      	; 0x200 <__EEPROM_REGION_LENGTH__>
 204:	00 c0       	rjmp	.+0      	; 0x206 <__EEPROM_REGION_LENGTH__+0x6>
 206:	00 00       	nop
 208:	08 95       	ret

0000020a <main>:
		}
	}
	
	int main(void)
	{
		DDRA = 0xFF;   //led
 20a:	8f ef       	ldi	r24, 0xFF	; 255
 20c:	8a bb       	out	0x1a, r24	; 26
		DDRC = 0xFF;  // keypad output(123)
 20e:	84 bb       	out	0x14, r24	; 20
		DDRD = 0x00;  // keypad input(A,B,C,D)
 210:	11 ba       	out	0x11, r1	; 17
		DDRB = 0xFF;
 212:	87 bb       	out	0x17, r24	; 23
		
		
		lcd_cmd(0x38); //initialize the LCD
 214:	88 e3       	ldi	r24, 0x38	; 56
 216:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
 21a:	8f e2       	ldi	r24, 0x2F	; 47
 21c:	95 e7       	ldi	r25, 0x75	; 117
 21e:	01 97       	sbiw	r24, 0x01	; 1
 220:	f1 f7       	brne	.-4      	; 0x21e <main+0x14>
 222:	00 c0       	rjmp	.+0      	; 0x224 <main+0x1a>
 224:	00 00       	nop
		_delay_ms(10);
		
		lcd_cmd(0x0E); // displaying on cursor
 226:	8e e0       	ldi	r24, 0x0E	; 14
 228:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
 22c:	8f e2       	ldi	r24, 0x2F	; 47
 22e:	95 e7       	ldi	r25, 0x75	; 117
 230:	01 97       	sbiw	r24, 0x01	; 1
 232:	f1 f7       	brne	.-4      	; 0x230 <main+0x26>
 234:	00 c0       	rjmp	.+0      	; 0x236 <main+0x2c>
 236:	00 00       	nop
		_delay_ms(10);
		
		lcd_cmd(0x01);  // clear screen
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
 23e:	8f e2       	ldi	r24, 0x2F	; 47
 240:	95 e7       	ldi	r25, 0x75	; 117
 242:	01 97       	sbiw	r24, 0x01	; 1
 244:	f1 f7       	brne	.-4      	; 0x242 <main+0x38>
 246:	00 c0       	rjmp	.+0      	; 0x248 <main+0x3e>
 248:	00 00       	nop
		_delay_ms(10);
		
		lcd_cmd(0x80); // start cursor at beginning
 24a:	80 e8       	ldi	r24, 0x80	; 128
 24c:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
 250:	8f e2       	ldi	r24, 0x2F	; 47
 252:	95 e7       	ldi	r25, 0x75	; 117
 254:	01 97       	sbiw	r24, 0x01	; 1
 256:	f1 f7       	brne	.-4      	; 0x254 <main+0x4a>
 258:	00 c0       	rjmp	.+0      	; 0x25a <main+0x50>
 25a:	00 00       	nop
		//lcd_data('A');
		//_delay_ms(10);
		
	while (1)
	{
		column_1();
 25c:	0e 94 59 00 	call	0xb2	; 0xb2 <column_1>
		column_2();
 260:	0e 94 93 00 	call	0x126	; 0x126 <column_2>
		column_3();
 264:	0e 94 cb 00 	call	0x196	; 0x196 <column_3>
 268:	9f ef       	ldi	r25, 0xFF	; 255
 26a:	22 e5       	ldi	r18, 0x52	; 82
 26c:	87 e0       	ldi	r24, 0x07	; 7
 26e:	91 50       	subi	r25, 0x01	; 1
 270:	20 40       	sbci	r18, 0x00	; 0
 272:	80 40       	sbci	r24, 0x00	; 0
 274:	e1 f7       	brne	.-8      	; 0x26e <main+0x64>
 276:	00 c0       	rjmp	.+0      	; 0x278 <main+0x6e>
 278:	00 00       	nop
 27a:	f0 cf       	rjmp	.-32     	; 0x25c <main+0x52>

0000027c <_exit>:
 27c:	f8 94       	cli

0000027e <__stop_program>:
 27e:	ff cf       	rjmp	.-2      	; 0x27e <__stop_program>
