
UART_Commu_REC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000154  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003a  00800060  00000154  000001c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000202  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000234  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006ca  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005f2  00000000  00000000  0000097a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000295  00000000  00000000  00000f6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000008c  00000000  00000000  00001204  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000032d  00000000  00000000  00001290  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ec  00000000  00000000  000015bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000016a9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e5       	ldi	r30, 0x54	; 84
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 39       	cpi	r26, 0x9A	; 154
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 7e 00 	call	0xfc	; 0xfc <main>
  7a:	0c 94 a8 00 	jmp	0x150	; 0x150 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <uart_init>:
#include <util/delay.h>


void uart_init()
{
UCSRA = 0x00;  //control register initialization
  82:	1b b8       	out	0x0b, r1	; 11
UCSRB = 0x18;  // enable transmitter & receiver
  84:	88 e1       	ldi	r24, 0x18	; 24
  86:	8a b9       	out	0x0a, r24	; 10
UCSRC = 0x86;  // async, no parity, 1 stop bit, 8 data bits
  88:	86 e8       	ldi	r24, 0x86	; 134
  8a:	80 bd       	out	0x20, r24	; 32
UBRRH = 0x00;  // baud rate initialization
  8c:	10 bc       	out	0x20, r1	; 32
UBRRL = 0x33; // 9600 baud rate	
  8e:	83 e3       	ldi	r24, 0x33	; 51
  90:	89 b9       	out	0x09, r24	; 9
  92:	08 95       	ret

00000094 <uart_transmit>:
}


void uart_transmit(unsigned char data)
{
	while((UCSRA & 0x20)==0x00) // wait for UDRE flag
  94:	5d 9b       	sbis	0x0b, 5	; 11
  96:	fe cf       	rjmp	.-4      	; 0x94 <uart_transmit>
	{
		;
	}
	UDR = data; //load data to UDR for transmission
  98:	8c b9       	out	0x0c, r24	; 12
  9a:	08 95       	ret

0000009c <uart_receive>:
}

unsigned char uart_receive()
{
	unsigned char d;
	while((UCSRA & 0x80)==0x00)
  9c:	5f 9b       	sbis	0x0b, 7	; 11
  9e:	fe cf       	rjmp	.-4      	; 0x9c <uart_receive>
	{
		;
	}
	d = UDR;
  a0:	8c b1       	in	r24, 0x0c	; 12
	return (d);
}
  a2:	08 95       	ret

000000a4 <data2>:

void data2()
{
  a4:	1f 93       	push	r17
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
  ae:	6c 97       	sbiw	r28, 0x1c	; 28
  b0:	0f b6       	in	r0, 0x3f	; 63
  b2:	f8 94       	cli
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	0f be       	out	0x3f, r0	; 63
  b8:	cd bf       	out	0x3d, r28	; 61
	unsigned char j = 0, b[] = {"Embedded Garage Tutorials!\r"};
  ba:	8c e1       	ldi	r24, 0x1C	; 28
  bc:	e0 e6       	ldi	r30, 0x60	; 96
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	de 01       	movw	r26, r28
  c2:	11 96       	adiw	r26, 0x01	; 1
  c4:	01 90       	ld	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	8a 95       	dec	r24
  ca:	e1 f7       	brne	.-8      	; 0xc4 <data2+0x20>
  cc:	10 e0       	ldi	r17, 0x00	; 0
		
	 while(b[j] != '\0')
  ce:	03 c0       	rjmp	.+6      	; 0xd6 <data2+0x32>
	 {
		 uart_transmit(b[j]);
  d0:	0e 94 4a 00 	call	0x94	; 0x94 <uart_transmit>
		 j++;
  d4:	1f 5f       	subi	r17, 0xFF	; 255

void data2()
{
	unsigned char j = 0, b[] = {"Embedded Garage Tutorials!\r"};
		
	 while(b[j] != '\0')
  d6:	e1 e0       	ldi	r30, 0x01	; 1
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	ec 0f       	add	r30, r28
  dc:	fd 1f       	adc	r31, r29
  de:	e1 0f       	add	r30, r17
  e0:	f1 1d       	adc	r31, r1
  e2:	80 81       	ld	r24, Z
  e4:	81 11       	cpse	r24, r1
  e6:	f4 cf       	rjmp	.-24     	; 0xd0 <data2+0x2c>
	 {
		 uart_transmit(b[j]);
		 j++;
	 }
}
  e8:	6c 96       	adiw	r28, 0x1c	; 28
  ea:	0f b6       	in	r0, 0x3f	; 63
  ec:	f8 94       	cli
  ee:	de bf       	out	0x3e, r29	; 62
  f0:	0f be       	out	0x3f, r0	; 63
  f2:	cd bf       	out	0x3d, r28	; 61
  f4:	df 91       	pop	r29
  f6:	cf 91       	pop	r28
  f8:	1f 91       	pop	r17
  fa:	08 95       	ret

000000fc <main>:

int main(void)
{
  fc:	cf 93       	push	r28
  fe:	df 93       	push	r29
 100:	cd b7       	in	r28, 0x3d	; 61
 102:	de b7       	in	r29, 0x3e	; 62
 104:	6d 97       	sbiw	r28, 0x1d	; 29
 106:	0f b6       	in	r0, 0x3f	; 63
 108:	f8 94       	cli
 10a:	de bf       	out	0x3e, r29	; 62
 10c:	0f be       	out	0x3f, r0	; 63
 10e:	cd bf       	out	0x3d, r28	; 61
    /* Replace with your application code */
		
    unsigned char i = 0, a[] = {"Hello Everyone Welcome to: \r"};
 110:	8d e1       	ldi	r24, 0x1D	; 29
 112:	ec e7       	ldi	r30, 0x7C	; 124
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	de 01       	movw	r26, r28
 118:	11 96       	adiw	r26, 0x01	; 1
 11a:	01 90       	ld	r0, Z+
 11c:	0d 92       	st	X+, r0
 11e:	8a 95       	dec	r24
 120:	e1 f7       	brne	.-8      	; 0x11a <main+0x1e>
    unsigned char d;

	
	
	uart_init();  //initialize UART
 122:	0e 94 41 00 	call	0x82	; 0x82 <uart_init>

int main(void)
{
    /* Replace with your application code */
		
    unsigned char i = 0, a[] = {"Hello Everyone Welcome to: \r"};
 126:	10 e0       	ldi	r17, 0x00	; 0

	
	
	uart_init();  //initialize UART
	
	while(a[i] != '\0')
 128:	03 c0       	rjmp	.+6      	; 0x130 <main+0x34>
    {
	    uart_transmit(a[i]);
 12a:	0e 94 4a 00 	call	0x94	; 0x94 <uart_transmit>
	    i++;
 12e:	1f 5f       	subi	r17, 0xFF	; 255

	
	
	uart_init();  //initialize UART
	
	while(a[i] != '\0')
 130:	e1 e0       	ldi	r30, 0x01	; 1
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	ec 0f       	add	r30, r28
 136:	fd 1f       	adc	r31, r29
 138:	e1 0f       	add	r30, r17
 13a:	f1 1d       	adc	r31, r1
 13c:	80 81       	ld	r24, Z
 13e:	81 11       	cpse	r24, r1
 140:	f4 cf       	rjmp	.-24     	; 0x12a <main+0x2e>
	    i++;
    }
	
	while(1)
	{
		d = uart_receive();
 142:	0e 94 4e 00 	call	0x9c	; 0x9c <uart_receive>
		     
		if(d == 'A')
 146:	81 34       	cpi	r24, 0x41	; 65
 148:	e1 f7       	brne	.-8      	; 0x142 <main+0x46>
		{				
        data2();
 14a:	0e 94 52 00 	call	0xa4	; 0xa4 <data2>
 14e:	f9 cf       	rjmp	.-14     	; 0x142 <main+0x46>

00000150 <_exit>:
 150:	f8 94       	cli

00000152 <__stop_program>:
 152:	ff cf       	rjmp	.-2      	; 0x152 <__stop_program>
