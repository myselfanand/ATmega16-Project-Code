
servo motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000144  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000174  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000756  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005cf  00000000  00000000  00000926  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002b6  00000000  00000000  00000ef5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000011ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000339  00000000  00000000  000011d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000168  00000000  00000000  00001509  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001671  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 76 00 	jmp	0xec	; 0xec <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
	DDRC = 0xFF;
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	84 bb       	out	0x14, r24	; 20
	
    /* Replace with your application code */
    while (1) 
    {
		
		PORTC = 0x01;
  70:	81 e0       	ldi	r24, 0x01	; 1
  72:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  74:	2f ef       	ldi	r18, 0xFF	; 255
  76:	39 e6       	ldi	r19, 0x69	; 105
  78:	98 e1       	ldi	r25, 0x18	; 24
  7a:	21 50       	subi	r18, 0x01	; 1
  7c:	30 40       	sbci	r19, 0x00	; 0
  7e:	90 40       	sbci	r25, 0x00	; 0
  80:	e1 f7       	brne	.-8      	; 0x7a <main+0xe>
  82:	00 c0       	rjmp	.+0      	; 0x84 <main+0x18>
  84:	00 00       	nop
		_delay_ms(1000);	
		PORTC = 0x00;
  86:	15 ba       	out	0x15, r1	; 21
  88:	2f ef       	ldi	r18, 0xFF	; 255
  8a:	33 ed       	ldi	r19, 0xD3	; 211
  8c:	90 e3       	ldi	r25, 0x30	; 48
  8e:	21 50       	subi	r18, 0x01	; 1
  90:	30 40       	sbci	r19, 0x00	; 0
  92:	90 40       	sbci	r25, 0x00	; 0
  94:	e1 f7       	brne	.-8      	; 0x8e <main+0x22>
  96:	00 c0       	rjmp	.+0      	; 0x98 <main+0x2c>
  98:	00 00       	nop
		_delay_ms(2000);
		
		
		
		PORTC = 0x01;
  9a:	85 bb       	out	0x15, r24	; 21
  9c:	2f ef       	ldi	r18, 0xFF	; 255
  9e:	3e e9       	ldi	r19, 0x9E	; 158
  a0:	94 e2       	ldi	r25, 0x24	; 36
  a2:	21 50       	subi	r18, 0x01	; 1
  a4:	30 40       	sbci	r19, 0x00	; 0
  a6:	90 40       	sbci	r25, 0x00	; 0
  a8:	e1 f7       	brne	.-8      	; 0xa2 <main+0x36>
  aa:	00 c0       	rjmp	.+0      	; 0xac <main+0x40>
  ac:	00 00       	nop
		_delay_ms(1500);
		PORTC = 0x00;
  ae:	15 ba       	out	0x15, r1	; 21
  b0:	2f ef       	ldi	r18, 0xFF	; 255
  b2:	33 ed       	ldi	r19, 0xD3	; 211
  b4:	90 e3       	ldi	r25, 0x30	; 48
  b6:	21 50       	subi	r18, 0x01	; 1
  b8:	30 40       	sbci	r19, 0x00	; 0
  ba:	90 40       	sbci	r25, 0x00	; 0
  bc:	e1 f7       	brne	.-8      	; 0xb6 <main+0x4a>
  be:	00 c0       	rjmp	.+0      	; 0xc0 <main+0x54>
  c0:	00 00       	nop
		_delay_ms(2000);
		
		
		PORTC = 0x01;
  c2:	85 bb       	out	0x15, r24	; 21
  c4:	2f ef       	ldi	r18, 0xFF	; 255
  c6:	33 ed       	ldi	r19, 0xD3	; 211
  c8:	80 e3       	ldi	r24, 0x30	; 48
  ca:	21 50       	subi	r18, 0x01	; 1
  cc:	30 40       	sbci	r19, 0x00	; 0
  ce:	80 40       	sbci	r24, 0x00	; 0
  d0:	e1 f7       	brne	.-8      	; 0xca <main+0x5e>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <main+0x68>
  d4:	00 00       	nop
		_delay_ms(2000);
		PORTC = 0x00;
  d6:	15 ba       	out	0x15, r1	; 21
  d8:	9f ef       	ldi	r25, 0xFF	; 255
  da:	23 ed       	ldi	r18, 0xD3	; 211
  dc:	30 e3       	ldi	r19, 0x30	; 48
  de:	91 50       	subi	r25, 0x01	; 1
  e0:	20 40       	sbci	r18, 0x00	; 0
  e2:	30 40       	sbci	r19, 0x00	; 0
  e4:	e1 f7       	brne	.-8      	; 0xde <main+0x72>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <main+0x7c>
  e8:	00 00       	nop
  ea:	c2 cf       	rjmp	.-124    	; 0x70 <main+0x4>

000000ec <_exit>:
  ec:	f8 94       	cli

000000ee <__stop_program>:
  ee:	ff cf       	rjmp	.-2      	; 0xee <__stop_program>
