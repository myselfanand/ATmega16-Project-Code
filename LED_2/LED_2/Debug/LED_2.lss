
LED_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000016e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001c2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001f4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000081b  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005de  00000000  00000000  00000a6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000031c  00000000  00000000  00001049  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001368  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000032d  00000000  00000000  0000138c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002e6  00000000  00000000  000016b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000199f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 b5 00 	jmp	0x16a	; 0x16a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
{
    /* Replace with your application code */
	unsigned char a = 0;
	unsigned char b = 0;
	
	DDRA = 0x00;
  6c:	1a ba       	out	0x1a, r1	; 26
	DDRB = 0xFF;
  6e:	8f ef       	ldi	r24, 0xFF	; 255
  70:	87 bb       	out	0x17, r24	; 23
	DDRC = 0x00;
  72:	14 ba       	out	0x14, r1	; 20
	
    while (1) 
	{		
	a = PINA & 0x20;
  74:	29 b3       	in	r18, 0x19	; 25
	b = PINC & 0x08;
  76:	83 b3       	in	r24, 0x13	; 19
  78:	88 70       	andi	r24, 0x08	; 8
	
	if(a == 0x00 && b == 0x00)
  7a:	92 2f       	mov	r25, r18
  7c:	90 72       	andi	r25, 0x20	; 32
  7e:	25 fd       	sbrc	r18, 5
  80:	18 c0       	rjmp	.+48     	; 0xb2 <main+0x46>
  82:	81 11       	cpse	r24, r1
  84:	16 c0       	rjmp	.+44     	; 0xb2 <main+0x46>
	{
		//ON/off 
		
		PORTB = 0xFF;
  86:	8f ef       	ldi	r24, 0xFF	; 255
  88:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8a:	2f e7       	ldi	r18, 0x7F	; 127
  8c:	8f e4       	ldi	r24, 0x4F	; 79
  8e:	92 e1       	ldi	r25, 0x12	; 18
  90:	21 50       	subi	r18, 0x01	; 1
  92:	80 40       	sbci	r24, 0x00	; 0
  94:	90 40       	sbci	r25, 0x00	; 0
  96:	e1 f7       	brne	.-8      	; 0x90 <main+0x24>
  98:	00 c0       	rjmp	.+0      	; 0x9a <main+0x2e>
  9a:	00 00       	nop
		_delay_ms(500);
		
		PORTB = 0x00;
  9c:	18 ba       	out	0x18, r1	; 24
  9e:	2f e7       	ldi	r18, 0x7F	; 127
  a0:	8f e4       	ldi	r24, 0x4F	; 79
  a2:	92 e1       	ldi	r25, 0x12	; 18
  a4:	21 50       	subi	r18, 0x01	; 1
  a6:	80 40       	sbci	r24, 0x00	; 0
  a8:	90 40       	sbci	r25, 0x00	; 0
  aa:	e1 f7       	brne	.-8      	; 0xa4 <main+0x38>
  ac:	00 c0       	rjmp	.+0      	; 0xae <main+0x42>
  ae:	00 00       	nop
  b0:	e1 cf       	rjmp	.-62     	; 0x74 <main+0x8>
		_delay_ms(500);				
	}
	
	else if(a == 0x00 && b == 0x08)
  b2:	91 11       	cpse	r25, r1
  b4:	19 c0       	rjmp	.+50     	; 0xe8 <main+0x7c>
  b6:	88 30       	cpi	r24, 0x08	; 8
  b8:	b9 f4       	brne	.+46     	; 0xe8 <main+0x7c>
	{
		//alternate blink
		
		PORTB = 0xAA;
  ba:	8a ea       	ldi	r24, 0xAA	; 170
  bc:	88 bb       	out	0x18, r24	; 24
  be:	2f e7       	ldi	r18, 0x7F	; 127
  c0:	8f e4       	ldi	r24, 0x4F	; 79
  c2:	92 e1       	ldi	r25, 0x12	; 18
  c4:	21 50       	subi	r18, 0x01	; 1
  c6:	80 40       	sbci	r24, 0x00	; 0
  c8:	90 40       	sbci	r25, 0x00	; 0
  ca:	e1 f7       	brne	.-8      	; 0xc4 <main+0x58>
  cc:	00 c0       	rjmp	.+0      	; 0xce <main+0x62>
  ce:	00 00       	nop
		_delay_ms(500);
		
		PORTB = 0x55;
  d0:	85 e5       	ldi	r24, 0x55	; 85
  d2:	88 bb       	out	0x18, r24	; 24
  d4:	2f e7       	ldi	r18, 0x7F	; 127
  d6:	8f e4       	ldi	r24, 0x4F	; 79
  d8:	92 e1       	ldi	r25, 0x12	; 18
  da:	21 50       	subi	r18, 0x01	; 1
  dc:	80 40       	sbci	r24, 0x00	; 0
  de:	90 40       	sbci	r25, 0x00	; 0
  e0:	e1 f7       	brne	.-8      	; 0xda <main+0x6e>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <main+0x78>
  e4:	00 00       	nop
  e6:	c6 cf       	rjmp	.-116    	; 0x74 <main+0x8>
		_delay_ms(500);
	}
	
	else if(a == 0x20 && b == 0x00)
  e8:	90 32       	cpi	r25, 0x20	; 32
  ea:	c9 f4       	brne	.+50     	; 0x11e <main+0xb2>
  ec:	81 11       	cpse	r24, r1
  ee:	17 c0       	rjmp	.+46     	; 0x11e <main+0xb2>
	{
		//half on off
		
	     PORTB = 0xF0;
  f0:	80 ef       	ldi	r24, 0xF0	; 240
  f2:	88 bb       	out	0x18, r24	; 24
  f4:	2f e7       	ldi	r18, 0x7F	; 127
  f6:	8f e4       	ldi	r24, 0x4F	; 79
  f8:	92 e1       	ldi	r25, 0x12	; 18
  fa:	21 50       	subi	r18, 0x01	; 1
  fc:	80 40       	sbci	r24, 0x00	; 0
  fe:	90 40       	sbci	r25, 0x00	; 0
 100:	e1 f7       	brne	.-8      	; 0xfa <main+0x8e>
 102:	00 c0       	rjmp	.+0      	; 0x104 <main+0x98>
 104:	00 00       	nop
		 _delay_ms(500);
		 
		 PORTB = 0x0F;
 106:	8f e0       	ldi	r24, 0x0F	; 15
 108:	88 bb       	out	0x18, r24	; 24
 10a:	2f e7       	ldi	r18, 0x7F	; 127
 10c:	8f e4       	ldi	r24, 0x4F	; 79
 10e:	92 e1       	ldi	r25, 0x12	; 18
 110:	21 50       	subi	r18, 0x01	; 1
 112:	80 40       	sbci	r24, 0x00	; 0
 114:	90 40       	sbci	r25, 0x00	; 0
 116:	e1 f7       	brne	.-8      	; 0x110 <main+0xa4>
 118:	00 c0       	rjmp	.+0      	; 0x11a <main+0xae>
 11a:	00 00       	nop
 11c:	ab cf       	rjmp	.-170    	; 0x74 <main+0x8>
		 _delay_ms(500);		
	}
	
	else if (a == 0x20 && b == 0x08)
 11e:	90 32       	cpi	r25, 0x20	; 32
 120:	c9 f4       	brne	.+50     	; 0x154 <main+0xe8>
 122:	88 30       	cpi	r24, 0x08	; 8
 124:	b9 f4       	brne	.+46     	; 0x154 <main+0xe8>
	{
		// ON/OFF in pair	
			
		PORTB = 0xCC;
 126:	8c ec       	ldi	r24, 0xCC	; 204
 128:	88 bb       	out	0x18, r24	; 24
 12a:	2f e7       	ldi	r18, 0x7F	; 127
 12c:	8f e4       	ldi	r24, 0x4F	; 79
 12e:	92 e1       	ldi	r25, 0x12	; 18
 130:	21 50       	subi	r18, 0x01	; 1
 132:	80 40       	sbci	r24, 0x00	; 0
 134:	90 40       	sbci	r25, 0x00	; 0
 136:	e1 f7       	brne	.-8      	; 0x130 <main+0xc4>
 138:	00 c0       	rjmp	.+0      	; 0x13a <main+0xce>
 13a:	00 00       	nop
		_delay_ms(500);
		
		PORTB = 0x33;
 13c:	83 e3       	ldi	r24, 0x33	; 51
 13e:	88 bb       	out	0x18, r24	; 24
 140:	2f e7       	ldi	r18, 0x7F	; 127
 142:	8f e4       	ldi	r24, 0x4F	; 79
 144:	92 e1       	ldi	r25, 0x12	; 18
 146:	21 50       	subi	r18, 0x01	; 1
 148:	80 40       	sbci	r24, 0x00	; 0
 14a:	90 40       	sbci	r25, 0x00	; 0
 14c:	e1 f7       	brne	.-8      	; 0x146 <main+0xda>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <main+0xe4>
 150:	00 00       	nop
 152:	90 cf       	rjmp	.-224    	; 0x74 <main+0x8>
		_delay_ms(500);
	}	
	
	else {
			PORTB = 0x00;
 154:	18 ba       	out	0x18, r1	; 24
 156:	2f e7       	ldi	r18, 0x7F	; 127
 158:	8f e4       	ldi	r24, 0x4F	; 79
 15a:	92 e1       	ldi	r25, 0x12	; 18
 15c:	21 50       	subi	r18, 0x01	; 1
 15e:	80 40       	sbci	r24, 0x00	; 0
 160:	90 40       	sbci	r25, 0x00	; 0
 162:	e1 f7       	brne	.-8      	; 0x15c <main+0xf0>
 164:	00 c0       	rjmp	.+0      	; 0x166 <main+0xfa>
 166:	00 00       	nop
 168:	85 cf       	rjmp	.-246    	; 0x74 <main+0x8>

0000016a <_exit>:
 16a:	f8 94       	cli

0000016c <__stop_program>:
 16c:	ff cf       	rjmp	.-2      	; 0x16c <__stop_program>
