
STRING_LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001a4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  000001a4  00000218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000260  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000095b  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000665  00000000  00000000  00000c2f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000337  00000000  00000000  00001294  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000070  00000000  00000000  000015cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000359  00000000  00000000  0000163c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000380  00000000  00000000  00001995  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001d15  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ea       	ldi	r30, 0xA4	; 164
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 37       	cpi	r26, 0x78	; 120
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 71 00 	call	0xe2	; 0xe2 <main>
  7a:	0c 94 d0 00 	jmp	0x1a0	; 0x1a0 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <lcd_cmd>:


void lcd_cmd(unsigned char cmd)
{

	PORTB = cmd;
  82:	88 bb       	out	0x18, r24	; 24
	
	PORTA = 0x04;
  84:	84 e0       	ldi	r24, 0x04	; 4
  86:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  88:	8f e2       	ldi	r24, 0x2F	; 47
  8a:	95 e7       	ldi	r25, 0x75	; 117
  8c:	01 97       	sbiw	r24, 0x01	; 1
  8e:	f1 f7       	brne	.-4      	; 0x8c <lcd_cmd+0xa>
  90:	00 c0       	rjmp	.+0      	; 0x92 <lcd_cmd+0x10>
  92:	00 00       	nop
	_delay_ms(10);
	
	PORTA = 0x00;
  94:	1b ba       	out	0x1b, r1	; 27
  96:	8f e2       	ldi	r24, 0x2F	; 47
  98:	95 e7       	ldi	r25, 0x75	; 117
  9a:	01 97       	sbiw	r24, 0x01	; 1
  9c:	f1 f7       	brne	.-4      	; 0x9a <lcd_cmd+0x18>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <lcd_cmd+0x1e>
  a0:	00 00       	nop
  a2:	08 95       	ret

000000a4 <lcd_data>:
}

void lcd_data(unsigned char data)
{
	
	PORTB = data;
  a4:	88 bb       	out	0x18, r24	; 24
	
	PORTA = 0x05;
  a6:	85 e0       	ldi	r24, 0x05	; 5
  a8:	8b bb       	out	0x1b, r24	; 27
  aa:	8f e2       	ldi	r24, 0x2F	; 47
  ac:	95 e7       	ldi	r25, 0x75	; 117
  ae:	01 97       	sbiw	r24, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <lcd_data+0xa>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <lcd_data+0x10>
  b4:	00 00       	nop
	_delay_ms(10);
	
	PORTA = 0X01;
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	8b bb       	out	0x1b, r24	; 27
  ba:	8f e2       	ldi	r24, 0x2F	; 47
  bc:	95 e7       	ldi	r25, 0x75	; 117
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <lcd_data+0x1a>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <lcd_data+0x20>
  c4:	00 00       	nop
  c6:	08 95       	ret

000000c8 <lcd_str>:
	_delay_ms(10);
}

void lcd_str(unsigned char *p)
{
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	ec 01       	movw	r28, r24
	while(*p!='\0')
  ce:	03 c0       	rjmp	.+6      	; 0xd6 <lcd_str+0xe>
	{
		lcd_data(*p);
  d0:	0e 94 52 00 	call	0xa4	; 0xa4 <lcd_data>
		p= p+1;
  d4:	21 96       	adiw	r28, 0x01	; 1
	_delay_ms(10);
}

void lcd_str(unsigned char *p)
{
	while(*p!='\0')
  d6:	88 81       	ld	r24, Y
  d8:	81 11       	cpse	r24, r1
  da:	fa cf       	rjmp	.-12     	; 0xd0 <lcd_str+0x8>
	{
		lcd_data(*p);
		p= p+1;
	}
}
  dc:	df 91       	pop	r29
  de:	cf 91       	pop	r28
  e0:	08 95       	ret

000000e2 <main>:

int main(void)
{
  e2:	cf 93       	push	r28
  e4:	df 93       	push	r29
  e6:	cd b7       	in	r28, 0x3d	; 61
  e8:	de b7       	in	r29, 0x3e	; 62
  ea:	68 97       	sbiw	r28, 0x18	; 24
  ec:	0f b6       	in	r0, 0x3f	; 63
  ee:	f8 94       	cli
  f0:	de bf       	out	0x3e, r29	; 62
  f2:	0f be       	out	0x3f, r0	; 63
  f4:	cd bf       	out	0x3d, r28	; 61
    /* Replace with your application code */
	DDRA = 0xFF;
  f6:	8f ef       	ldi	r24, 0xFF	; 255
  f8:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xFF;
  fa:	87 bb       	out	0x17, r24	; 23
	
	lcd_cmd(0x38); //initialize the LCD
  fc:	88 e3       	ldi	r24, 0x38	; 56
  fe:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
 102:	8f e2       	ldi	r24, 0x2F	; 47
 104:	95 e7       	ldi	r25, 0x75	; 117
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <main+0x24>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <main+0x2a>
 10c:	00 00       	nop
	_delay_ms(10);
	
	lcd_cmd(0x0E); // displaying on cursor
 10e:	8e e0       	ldi	r24, 0x0E	; 14
 110:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
 114:	8f e2       	ldi	r24, 0x2F	; 47
 116:	95 e7       	ldi	r25, 0x75	; 117
 118:	01 97       	sbiw	r24, 0x01	; 1
 11a:	f1 f7       	brne	.-4      	; 0x118 <main+0x36>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <main+0x3c>
 11e:	00 00       	nop
	_delay_ms(10);
	
	lcd_cmd(0x01);  //clear screen
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
 126:	8f e2       	ldi	r24, 0x2F	; 47
 128:	95 e7       	ldi	r25, 0x75	; 117
 12a:	01 97       	sbiw	r24, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <main+0x48>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <main+0x4e>
 130:	00 00       	nop
	_delay_ms(10);
	
	lcd_cmd(0x80); // start cursor at beginning
 132:	80 e8       	ldi	r24, 0x80	; 128
 134:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
 138:	8f e2       	ldi	r24, 0x2F	; 47
 13a:	95 e7       	ldi	r25, 0x75	; 117
 13c:	01 97       	sbiw	r24, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <main+0x5a>
 140:	00 c0       	rjmp	.+0      	; 0x142 <main+0x60>
 142:	00 00       	nop
	_delay_ms(10);
	
	char a[] ="hii! how r u";
 144:	8d e0       	ldi	r24, 0x0D	; 13
 146:	e0 e6       	ldi	r30, 0x60	; 96
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	de 01       	movw	r26, r28
 14c:	11 96       	adiw	r26, 0x01	; 1
 14e:	01 90       	ld	r0, Z+
 150:	0d 92       	st	X+, r0
 152:	8a 95       	dec	r24
 154:	e1 f7       	brne	.-8      	; 0x14e <main+0x6c>
	lcd_str(a);
 156:	ce 01       	movw	r24, r28
 158:	01 96       	adiw	r24, 0x01	; 1
 15a:	0e 94 64 00 	call	0xc8	; 0xc8 <lcd_str>
	
	lcd_cmd(0xC0); // start cursor at beginning
 15e:	80 ec       	ldi	r24, 0xC0	; 192
 160:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
 164:	8f e2       	ldi	r24, 0x2F	; 47
 166:	95 e7       	ldi	r25, 0x75	; 117
 168:	01 97       	sbiw	r24, 0x01	; 1
 16a:	f1 f7       	brne	.-4      	; 0x168 <main+0x86>
 16c:	00 c0       	rjmp	.+0      	; 0x16e <main+0x8c>
 16e:	00 00       	nop
	_delay_ms(10);
	
	char b[] = "i am fine!";
 170:	8b e0       	ldi	r24, 0x0B	; 11
 172:	ed e6       	ldi	r30, 0x6D	; 109
 174:	f0 e0       	ldi	r31, 0x00	; 0
 176:	de 01       	movw	r26, r28
 178:	1e 96       	adiw	r26, 0x0e	; 14
 17a:	01 90       	ld	r0, Z+
 17c:	0d 92       	st	X+, r0
 17e:	8a 95       	dec	r24
 180:	e1 f7       	brne	.-8      	; 0x17a <main+0x98>
	lcd_str(b);
 182:	ce 01       	movw	r24, r28
 184:	0e 96       	adiw	r24, 0x0e	; 14
 186:	0e 94 64 00 	call	0xc8	; 0xc8 <lcd_str>
	
}
 18a:	80 e0       	ldi	r24, 0x00	; 0
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	68 96       	adiw	r28, 0x18	; 24
 190:	0f b6       	in	r0, 0x3f	; 63
 192:	f8 94       	cli
 194:	de bf       	out	0x3e, r29	; 62
 196:	0f be       	out	0x3f, r0	; 63
 198:	cd bf       	out	0x3d, r28	; 61
 19a:	df 91       	pop	r29
 19c:	cf 91       	pop	r28
 19e:	08 95       	ret

000001a0 <_exit>:
 1a0:	f8 94       	cli

000001a2 <__stop_program>:
 1a2:	ff cf       	rjmp	.-2      	; 0x1a2 <__stop_program>
