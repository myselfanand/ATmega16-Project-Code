
KEYPAD_INTERFACE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000014c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000017c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005b6  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000053d  00000000  00000000  0000078e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000271  00000000  00000000  00000ccb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000f3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002f8  00000000  00000000  00000f60  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  00001258  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include <util/delay.h>


int main(void)
{
	DDRA = 0xFF;   //led
  6c:	8f ef       	ldi	r24, 0xFF	; 255
  6e:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0xFF;  // keypad output(123)
  70:	84 bb       	out	0x14, r24	; 20
	DDRD = 0x00;  // keypad input(A,B,C,D)
  72:	11 ba       	out	0x11, r1	; 17
	DDRB = 0xFF;
  74:	87 bb       	out	0x17, r24	; 23
   
    while (1) 
    {
		PORTC = 0x04;
  76:	84 e0       	ldi	r24, 0x04	; 4
  78:	85 bb       	out	0x15, r24	; 21
		
		if(PIND & 0x01)
  7a:	80 9b       	sbis	0x10, 0	; 16
  7c:	03 c0       	rjmp	.+6      	; 0x84 <main+0x18>
		{
			PORTA = 0x01;	
  7e:	81 e0       	ldi	r24, 0x01	; 1
  80:	8b bb       	out	0x1b, r24	; 27
  82:	0e c0       	rjmp	.+28     	; 0xa0 <main+0x34>
		}
		
		else if(PIND & 0x02)
  84:	81 9b       	sbis	0x10, 1	; 16
  86:	03 c0       	rjmp	.+6      	; 0x8e <main+0x22>
		{
			PORTA = 0x08;			
  88:	88 e0       	ldi	r24, 0x08	; 8
  8a:	8b bb       	out	0x1b, r24	; 27
  8c:	09 c0       	rjmp	.+18     	; 0xa0 <main+0x34>
		}
		
		else if(PIND & 0x04)
  8e:	82 9b       	sbis	0x10, 2	; 16
  90:	03 c0       	rjmp	.+6      	; 0x98 <main+0x2c>
		{			
			PORTA = 0x40;
  92:	80 e4       	ldi	r24, 0x40	; 64
  94:	8b bb       	out	0x1b, r24	; 27
  96:	04 c0       	rjmp	.+8      	; 0xa0 <main+0x34>
		}
		
		else if(PIND & 0x08) 
  98:	83 9b       	sbis	0x10, 3	; 16
  9a:	02 c0       	rjmp	.+4      	; 0xa0 <main+0x34>
		{
			PORTA ='*';
  9c:	8a e2       	ldi	r24, 0x2A	; 42
  9e:	8b bb       	out	0x1b, r24	; 27
		else
		{
			
		}
		
		                                       PORTC = 0x02;
  a0:	82 e0       	ldi	r24, 0x02	; 2
  a2:	85 bb       	out	0x15, r24	; 21
											   
											   if(PIND & 0x01)
  a4:	80 9b       	sbis	0x10, 0	; 16
  a6:	02 c0       	rjmp	.+4      	; 0xac <main+0x40>
											   {
												 PORTA = 0x02;												 
  a8:	8b bb       	out	0x1b, r24	; 27
  aa:	0c c0       	rjmp	.+24     	; 0xc4 <main+0x58>
											   }
											   
											   else if(PIND & 0x02)
  ac:	81 9b       	sbis	0x10, 1	; 16
  ae:	03 c0       	rjmp	.+6      	; 0xb6 <main+0x4a>
											   {
												 PORTA = 0x10;
  b0:	80 e1       	ldi	r24, 0x10	; 16
  b2:	8b bb       	out	0x1b, r24	; 27
  b4:	07 c0       	rjmp	.+14     	; 0xc4 <main+0x58>
											   }
											   
											   else if(PIND & 0x04)
  b6:	82 9b       	sbis	0x10, 2	; 16
  b8:	03 c0       	rjmp	.+6      	; 0xc0 <main+0x54>
											   {
												   PORTA = 0x80;
  ba:	80 e8       	ldi	r24, 0x80	; 128
  bc:	8b bb       	out	0x1b, r24	; 27
  be:	02 c0       	rjmp	.+4      	; 0xc4 <main+0x58>
											   }
											   
											   else if(PIND & 0x08)
  c0:	83 99       	sbic	0x10, 3	; 16
											   {
												   PORTA = 0x00;
  c2:	1b ba       	out	0x1b, r1	; 27
											   }
											   else
											   {
												   
											   }
		PORTC = 0x01;
  c4:	81 e0       	ldi	r24, 0x01	; 1
  c6:	85 bb       	out	0x15, r24	; 21
		
		if(PIND & 0x01)
  c8:	80 9b       	sbis	0x10, 0	; 16
  ca:	03 c0       	rjmp	.+6      	; 0xd2 <main+0x66>
		{
			PORTA = 0x04;
  cc:	84 e0       	ldi	r24, 0x04	; 4
  ce:	8b bb       	out	0x1b, r24	; 27
  d0:	d2 cf       	rjmp	.-92     	; 0x76 <main+0xa>
		}
		
		else if(PIND & 0x02)
  d2:	81 9b       	sbis	0x10, 1	; 16
  d4:	03 c0       	rjmp	.+6      	; 0xdc <main+0x70>
		{
			PORTA = 0x20;
  d6:	80 e2       	ldi	r24, 0x20	; 32
  d8:	8b bb       	out	0x1b, r24	; 27
  da:	cd cf       	rjmp	.-102    	; 0x76 <main+0xa>
		}
		
		else if(PIND & 0x04)
  dc:	82 9b       	sbis	0x10, 2	; 16
  de:	03 c0       	rjmp	.+6      	; 0xe6 <main+0x7a>
		{
			PORTB = 0xC0;
  e0:	80 ec       	ldi	r24, 0xC0	; 192
  e2:	88 bb       	out	0x18, r24	; 24
  e4:	c8 cf       	rjmp	.-112    	; 0x76 <main+0xa>
		}
		
		else if(PIND & 0x08)
  e6:	83 9b       	sbis	0x10, 3	; 16
  e8:	03 c0       	rjmp	.+6      	; 0xf0 <main+0x84>
		{
			PORTA = '#';
  ea:	83 e2       	ldi	r24, 0x23	; 35
  ec:	8b bb       	out	0x1b, r24	; 27
  ee:	c3 cf       	rjmp	.-122    	; 0x76 <main+0xa>
		}
		else
		{
			PORTB = 0x00;
  f0:	18 ba       	out	0x18, r1	; 24
  f2:	c1 cf       	rjmp	.-126    	; 0x76 <main+0xa>

000000f4 <_exit>:
  f4:	f8 94       	cli

000000f6 <__stop_program>:
  f6:	ff cf       	rjmp	.-2      	; 0xf6 <__stop_program>
