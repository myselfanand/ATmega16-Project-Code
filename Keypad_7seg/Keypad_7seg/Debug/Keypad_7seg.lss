
Keypad_7seg.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000138  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000018c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001bc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000060e  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000055c  00000000  00000000  0000083e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000303  00000000  00000000  00000d9a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  000010a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000309  00000000  00000000  000010f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000028  00000000  00000000  000013fd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 8e 00 	call	0x11c	; 0x11c <main>
  64:	0c 94 9a 00 	jmp	0x134	; 0x134 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <column_1.1730>:
	DDRD = 0x00;  // keypad input(A,B,C,D)
	DDRB = 0xFF;
	
	void column_1()
	{
		PORTC = 0x04;
  6c:	84 e0       	ldi	r24, 0x04	; 4
  6e:	85 bb       	out	0x15, r24	; 21
		
		if(PIND & 0x01)
  70:	80 9b       	sbis	0x10, 0	; 16
  72:	05 c0       	rjmp	.+10     	; 0x7e <column_1.1730+0x12>
		{
			PORTA = 0x01;
  74:	81 e0       	ldi	r24, 0x01	; 1
  76:	8b bb       	out	0x1b, r24	; 27
			PORTB = 0x06;
  78:	86 e0       	ldi	r24, 0x06	; 6
  7a:	88 bb       	out	0x18, r24	; 24
  7c:	08 95       	ret
			
		}
		
		else if(PIND & 0x02)
  7e:	81 9b       	sbis	0x10, 1	; 16
  80:	05 c0       	rjmp	.+10     	; 0x8c <column_1.1730+0x20>
		{
			PORTA = 0x08;
  82:	88 e0       	ldi	r24, 0x08	; 8
  84:	8b bb       	out	0x1b, r24	; 27
			PORTB = 0x66;
  86:	86 e6       	ldi	r24, 0x66	; 102
  88:	88 bb       	out	0x18, r24	; 24
  8a:	08 95       	ret
			
		}
		
		else if(PIND & 0x04)
  8c:	82 9b       	sbis	0x10, 2	; 16
  8e:	05 c0       	rjmp	.+10     	; 0x9a <column_1.1730+0x2e>
		{
			PORTA = 0x40;
  90:	80 e4       	ldi	r24, 0x40	; 64
  92:	8b bb       	out	0x1b, r24	; 27
			PORTB = 0x07;
  94:	87 e0       	ldi	r24, 0x07	; 7
  96:	88 bb       	out	0x18, r24	; 24
  98:	08 95       	ret
			
		}
		
		else if(PIND & 0x08)
  9a:	83 9b       	sbis	0x10, 3	; 16
  9c:	04 c0       	rjmp	.+8      	; 0xa6 <column_1.1730+0x3a>
		{
			PORTA ='*';
  9e:	8a e2       	ldi	r24, 0x2A	; 42
  a0:	8b bb       	out	0x1b, r24	; 27
			PORTB = 0x77;
  a2:	87 e7       	ldi	r24, 0x77	; 119
  a4:	88 bb       	out	0x18, r24	; 24
  a6:	08 95       	ret

000000a8 <column_2.1732>:
		
	}
	
	void column_2()
	{
		PORTC = 0x02;
  a8:	82 e0       	ldi	r24, 0x02	; 2
  aa:	85 bb       	out	0x15, r24	; 21
		
		if(PIND & 0x01)
  ac:	80 9b       	sbis	0x10, 0	; 16
  ae:	04 c0       	rjmp	.+8      	; 0xb8 <column_2.1732+0x10>
		{
			PORTA = 0x02;
  b0:	8b bb       	out	0x1b, r24	; 27
			PORTB = 0x5B;
  b2:	8b e5       	ldi	r24, 0x5B	; 91
  b4:	88 bb       	out	0x18, r24	; 24
  b6:	08 95       	ret
			
		}
		
		else if(PIND & 0x02)
  b8:	81 9b       	sbis	0x10, 1	; 16
  ba:	05 c0       	rjmp	.+10     	; 0xc6 <column_2.1732+0x1e>
		{
			PORTA = 0x10;
  bc:	80 e1       	ldi	r24, 0x10	; 16
  be:	8b bb       	out	0x1b, r24	; 27
			PORTB = 0x6D;
  c0:	8d e6       	ldi	r24, 0x6D	; 109
  c2:	88 bb       	out	0x18, r24	; 24
  c4:	08 95       	ret
			
		}
		
		else if(PIND & 0x04)
  c6:	82 9b       	sbis	0x10, 2	; 16
  c8:	05 c0       	rjmp	.+10     	; 0xd4 <column_2.1732+0x2c>
		{
			PORTA = 0x80;
  ca:	80 e8       	ldi	r24, 0x80	; 128
  cc:	8b bb       	out	0x1b, r24	; 27
			PORTB = 0x7F;
  ce:	8f e7       	ldi	r24, 0x7F	; 127
  d0:	88 bb       	out	0x18, r24	; 24
  d2:	08 95       	ret
			
		}
		
		else if(PIND & 0x08)
  d4:	83 9b       	sbis	0x10, 3	; 16
  d6:	03 c0       	rjmp	.+6      	; 0xde <column_2.1732+0x36>
		{
			PORTA = 0x00;
  d8:	1b ba       	out	0x1b, r1	; 27
			PORTB = 0x3F;
  da:	8f e3       	ldi	r24, 0x3F	; 63
  dc:	88 bb       	out	0x18, r24	; 24
  de:	08 95       	ret

000000e0 <column_3.1734>:
	}
	
	void column_3()
	{
		
		PORTC = 0x01;
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	85 bb       	out	0x15, r24	; 21
		
		if(PIND & 0x01)
  e4:	80 9b       	sbis	0x10, 0	; 16
  e6:	05 c0       	rjmp	.+10     	; 0xf2 <column_3.1734+0x12>
		{
			PORTA = 0x04;
  e8:	84 e0       	ldi	r24, 0x04	; 4
  ea:	8b bb       	out	0x1b, r24	; 27
			PORTB = 0x4F;
  ec:	8f e4       	ldi	r24, 0x4F	; 79
  ee:	88 bb       	out	0x18, r24	; 24
  f0:	08 95       	ret
			
		}
		
		else if(PIND & 0x02)
  f2:	81 9b       	sbis	0x10, 1	; 16
  f4:	05 c0       	rjmp	.+10     	; 0x100 <column_3.1734+0x20>
		{
			PORTA = 0x20;
  f6:	80 e2       	ldi	r24, 0x20	; 32
  f8:	8b bb       	out	0x1b, r24	; 27
			PORTB = 0x7D;
  fa:	8d e7       	ldi	r24, 0x7D	; 125
  fc:	88 bb       	out	0x18, r24	; 24
  fe:	08 95       	ret
			
		}
		
		else if(PIND & 0x04)
 100:	82 9b       	sbis	0x10, 2	; 16
 102:	05 c0       	rjmp	.+10     	; 0x10e <column_3.1734+0x2e>
		{
			PORTB = 0xC0;
 104:	80 ec       	ldi	r24, 0xC0	; 192
 106:	88 bb       	out	0x18, r24	; 24
			PORTB = 0x6F;
 108:	8f e6       	ldi	r24, 0x6F	; 111
 10a:	88 bb       	out	0x18, r24	; 24
 10c:	08 95       	ret
			
		}
		
		else if(PIND & 0x08)
 10e:	83 9b       	sbis	0x10, 3	; 16
 110:	04 c0       	rjmp	.+8      	; 0x11a <column_3.1734+0x3a>
		{
			PORTA = '#';
 112:	83 e2       	ldi	r24, 0x23	; 35
 114:	8b bb       	out	0x1b, r24	; 27
			PORTB = 0x39;
 116:	89 e3       	ldi	r24, 0x39	; 57
 118:	88 bb       	out	0x18, r24	; 24
 11a:	08 95       	ret

0000011c <main>:
#include <util/delay.h>


int main(void)
{
	DDRA = 0xFF;   //led
 11c:	8f ef       	ldi	r24, 0xFF	; 255
 11e:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0xFF;  // keypad output(123)
 120:	84 bb       	out	0x14, r24	; 20
	DDRD = 0x00;  // keypad input(A,B,C,D)
 122:	11 ba       	out	0x11, r1	; 17
	DDRB = 0xFF;
 124:	87 bb       	out	0x17, r24	; 23
		}
	}
	
	while (1)
	{
		column_1();
 126:	0e 94 36 00 	call	0x6c	; 0x6c <column_1.1730>
		column_2();
 12a:	0e 94 54 00 	call	0xa8	; 0xa8 <column_2.1732>
		column_3();
 12e:	0e 94 70 00 	call	0xe0	; 0xe0 <column_3.1734>
 132:	f9 cf       	rjmp	.-14     	; 0x126 <main+0xa>

00000134 <_exit>:
 134:	f8 94       	cli

00000136 <__stop_program>:
 136:	ff cf       	rjmp	.-2      	; 0x136 <__stop_program>
