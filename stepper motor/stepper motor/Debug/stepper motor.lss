
stepper motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000de  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000132  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000132  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000164  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000705  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005d7  00000000  00000000  000008cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000029b  00000000  00000000  00000ea4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001140  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000351  00000000  00000000  00001174  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000120  00000000  00000000  000014c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000015e5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 67 00 	call	0xce	; 0xce <main>
  64:	0c 94 6d 00 	jmp	0xda	; 0xda <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <two_phase_clockwise>:

void two_phase_clockwise()
{
	//CW-2 phase excitation
	
	PORTC=0x09;      //port c work as clockwise two phase
  6c:	89 e0       	ldi	r24, 0x09	; 9
  6e:	85 bb       	out	0x15, r24	; 21
	PORTB=0x09;     //port b work as clockwise single phase 
  70:	88 bb       	out	0x18, r24	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  72:	2f ef       	ldi	r18, 0xFF	; 255
  74:	8b e7       	ldi	r24, 0x7B	; 123
  76:	92 e9       	ldi	r25, 0x92	; 146
  78:	21 50       	subi	r18, 0x01	; 1
  7a:	80 40       	sbci	r24, 0x00	; 0
  7c:	90 40       	sbci	r25, 0x00	; 0
  7e:	e1 f7       	brne	.-8      	; 0x78 <two_phase_clockwise+0xc>
  80:	00 c0       	rjmp	.+0      	; 0x82 <two_phase_clockwise+0x16>
  82:	00 00       	nop
	_delay_ms(4000);
	
	PORTC=0x0c;
  84:	8c e0       	ldi	r24, 0x0C	; 12
  86:	85 bb       	out	0x15, r24	; 21
	PORTB=0x0c;
  88:	88 bb       	out	0x18, r24	; 24
  8a:	2f ef       	ldi	r18, 0xFF	; 255
  8c:	8b e7       	ldi	r24, 0x7B	; 123
  8e:	92 e9       	ldi	r25, 0x92	; 146
  90:	21 50       	subi	r18, 0x01	; 1
  92:	80 40       	sbci	r24, 0x00	; 0
  94:	90 40       	sbci	r25, 0x00	; 0
  96:	e1 f7       	brne	.-8      	; 0x90 <two_phase_clockwise+0x24>
  98:	00 c0       	rjmp	.+0      	; 0x9a <two_phase_clockwise+0x2e>
  9a:	00 00       	nop
	_delay_ms(4000);
	
	PORTC=0x06;
  9c:	86 e0       	ldi	r24, 0x06	; 6
  9e:	85 bb       	out	0x15, r24	; 21
	PORTB=0x06;
  a0:	88 bb       	out	0x18, r24	; 24
  a2:	2f ef       	ldi	r18, 0xFF	; 255
  a4:	8b e7       	ldi	r24, 0x7B	; 123
  a6:	92 e9       	ldi	r25, 0x92	; 146
  a8:	21 50       	subi	r18, 0x01	; 1
  aa:	80 40       	sbci	r24, 0x00	; 0
  ac:	90 40       	sbci	r25, 0x00	; 0
  ae:	e1 f7       	brne	.-8      	; 0xa8 <two_phase_clockwise+0x3c>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <two_phase_clockwise+0x46>
  b2:	00 00       	nop
	_delay_ms(4000);
	
	PORTC=0x03;
  b4:	83 e0       	ldi	r24, 0x03	; 3
  b6:	85 bb       	out	0x15, r24	; 21
	PORTB=0x03;
  b8:	88 bb       	out	0x18, r24	; 24
  ba:	2f ef       	ldi	r18, 0xFF	; 255
  bc:	8b e7       	ldi	r24, 0x7B	; 123
  be:	92 e9       	ldi	r25, 0x92	; 146
  c0:	21 50       	subi	r18, 0x01	; 1
  c2:	80 40       	sbci	r24, 0x00	; 0
  c4:	90 40       	sbci	r25, 0x00	; 0
  c6:	e1 f7       	brne	.-8      	; 0xc0 <two_phase_clockwise+0x54>
  c8:	00 c0       	rjmp	.+0      	; 0xca <two_phase_clockwise+0x5e>
  ca:	00 00       	nop
  cc:	08 95       	ret

000000ce <main>:
// }


int main(void)
{
	DDRC = 0xff;
  ce:	8f ef       	ldi	r24, 0xFF	; 255
  d0:	84 bb       	out	0x14, r24	; 20
	DDRB = 0xff;
  d2:	87 bb       	out	0x17, r24	; 23
	
	while (1)
	{
		//singlephase_clockwise();
		//singlephase_anti_clockwise();
		two_phase_clockwise();
  d4:	0e 94 36 00 	call	0x6c	; 0x6c <two_phase_clockwise>
  d8:	fd cf       	rjmp	.-6      	; 0xd4 <main+0x6>

000000da <_exit>:
  da:	f8 94       	cli

000000dc <__stop_program>:
  dc:	ff cf       	rjmp	.-2      	; 0xdc <__stop_program>
