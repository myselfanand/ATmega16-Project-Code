
TEMP_SENSOR_INTERFACING.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000654  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  00000654  000006c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000006e6  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000718  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000754  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a70  00000000  00000000  000007a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006f5  00000000  00000000  00001214  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000411  00000000  00000000  00001909  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000bc  00000000  00000000  00001d1c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003af  00000000  00000000  00001dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000481  00000000  00000000  00002187  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00002608  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e5       	ldi	r30, 0x54	; 84
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 37       	cpi	r26, 0x7E	; 126
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 04 01 	call	0x208	; 0x208 <main>
  7a:	0c 94 28 03 	jmp	0x650	; 0x650 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <lcd_cmd>:


void lcd_cmd(unsigned char cmd)
{

	PORTB = cmd;
  82:	88 bb       	out	0x18, r24	; 24
	
	PORTC = 0x04;
  84:	84 e0       	ldi	r24, 0x04	; 4
  86:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  88:	8f e2       	ldi	r24, 0x2F	; 47
  8a:	95 e7       	ldi	r25, 0x75	; 117
  8c:	01 97       	sbiw	r24, 0x01	; 1
  8e:	f1 f7       	brne	.-4      	; 0x8c <lcd_cmd+0xa>
  90:	00 c0       	rjmp	.+0      	; 0x92 <lcd_cmd+0x10>
  92:	00 00       	nop
	_delay_ms(10);
	
	PORTC = 0x00;
  94:	15 ba       	out	0x15, r1	; 21
  96:	8f e2       	ldi	r24, 0x2F	; 47
  98:	95 e7       	ldi	r25, 0x75	; 117
  9a:	01 97       	sbiw	r24, 0x01	; 1
  9c:	f1 f7       	brne	.-4      	; 0x9a <lcd_cmd+0x18>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <lcd_cmd+0x1e>
  a0:	00 00       	nop
  a2:	08 95       	ret

000000a4 <lcd_data>:
}

void lcd_data(unsigned char data)
{
	
	PORTB = data;
  a4:	88 bb       	out	0x18, r24	; 24
	
	PORTC = 0x05;
  a6:	85 e0       	ldi	r24, 0x05	; 5
  a8:	85 bb       	out	0x15, r24	; 21
  aa:	8f e2       	ldi	r24, 0x2F	; 47
  ac:	95 e7       	ldi	r25, 0x75	; 117
  ae:	01 97       	sbiw	r24, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <lcd_data+0xa>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <lcd_data+0x10>
  b4:	00 00       	nop
	_delay_ms(10);
	
	PORTC = 0X01;
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	85 bb       	out	0x15, r24	; 21
  ba:	8f e2       	ldi	r24, 0x2F	; 47
  bc:	95 e7       	ldi	r25, 0x75	; 117
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <lcd_data+0x1a>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <lcd_data+0x20>
  c4:	00 00       	nop
  c6:	08 95       	ret

000000c8 <adc_init>:


//to initialize the ADC
void adc_init()
{
	DDRA = 0x00; //make ADC port as input
  c8:	1a ba       	out	0x1a, r1	; 26
	ADMUX = 0x40; // Vref=AVCC; select channel 0
  ca:	80 e4       	ldi	r24, 0x40	; 64
  cc:	87 b9       	out	0x07, r24	; 7
	ADCSRA = 0xc3; // enable ADC & start 1st dummy conversion; set ADC module prescalar; to 8 critical for accurate adc result
  ce:	83 ec       	ldi	r24, 0xC3	; 195
  d0:	86 b9       	out	0x06, r24	; 6
  d2:	08 95       	ret

000000d4 <adc_read>:


unsigned int adc_read(unsigned char ch)
{
	unsigned int low, high, adc_val;
	ADMUX |= ch;
  d4:	97 b1       	in	r25, 0x07	; 7
  d6:	89 2b       	or	r24, r25
  d8:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADSC);
  da:	86 b1       	in	r24, 0x06	; 6
  dc:	80 64       	ori	r24, 0x40	; 64
  de:	86 b9       	out	0x06, r24	; 6
	while (!(ADCSRA & 0x10));
  e0:	34 9b       	sbis	0x06, 4	; 6
  e2:	fe cf       	rjmp	.-4      	; 0xe0 <adc_read+0xc>
	ADCSRA |= 0x10;
  e4:	86 b1       	in	r24, 0x06	; 6
  e6:	80 61       	ori	r24, 0x10	; 16
  e8:	86 b9       	out	0x06, r24	; 6
	
	low = ADCL;
  ea:	24 b1       	in	r18, 0x04	; 4
	high = ((unsigned int)(ADCH << 8));
  ec:	35 b1       	in	r19, 0x05	; 5
  ee:	80 e0       	ldi	r24, 0x00	; 0
  f0:	93 2f       	mov	r25, r19
	adc_val = low | high;
	return(adc_val);
}
  f2:	82 2b       	or	r24, r18
  f4:	08 95       	ret

000000f6 <lcd_str>:


void lcd_str(unsigned char *p)
{
  f6:	cf 93       	push	r28
  f8:	df 93       	push	r29
  fa:	ec 01       	movw	r28, r24
		while(*p!='\0')
  fc:	03 c0       	rjmp	.+6      	; 0x104 <lcd_str+0xe>
		{
			lcd_data(*p);
  fe:	0e 94 52 00 	call	0xa4	; 0xa4 <lcd_data>
			p= p+1;
 102:	21 96       	adiw	r28, 0x01	; 1
}


void lcd_str(unsigned char *p)
{
		while(*p!='\0')
 104:	88 81       	ld	r24, Y
 106:	81 11       	cpse	r24, r1
 108:	fa cf       	rjmp	.-12     	; 0xfe <lcd_str+0x8>
		{
			lcd_data(*p);
			p= p+1;
		}
	
}
 10a:	df 91       	pop	r29
 10c:	cf 91       	pop	r28
 10e:	08 95       	ret

00000110 <send_vtg_lcd>:
	lcd_str(ascii_val);
}
*/

float send_vtg_lcd(unsigned int data)
{
 110:	cf 92       	push	r12
 112:	df 92       	push	r13
 114:	ef 92       	push	r14
 116:	ff 92       	push	r15
 118:	1f 93       	push	r17
 11a:	cf 93       	push	r28
 11c:	df 93       	push	r29
 11e:	00 d0       	rcall	.+0      	; 0x120 <send_vtg_lcd+0x10>
 120:	00 d0       	rcall	.+0      	; 0x122 <send_vtg_lcd+0x12>
 122:	cd b7       	in	r28, 0x3d	; 61
 124:	de b7       	in	r29, 0x3e	; 62
	unsigned char i =3, ascii_val[4] = "0000";
 126:	20 e3       	ldi	r18, 0x30	; 48
 128:	30 e3       	ldi	r19, 0x30	; 48
 12a:	3a 83       	std	Y+2, r19	; 0x02
 12c:	29 83       	std	Y+1, r18	; 0x01
 12e:	3c 83       	std	Y+4, r19	; 0x04
 130:	2b 83       	std	Y+3, r18	; 0x03
	float vin;
	
	vin = (data*5.0)/1023;
 132:	bc 01       	movw	r22, r24
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <__floatunsisf>
 13c:	20 e0       	ldi	r18, 0x00	; 0
 13e:	30 e0       	ldi	r19, 0x00	; 0
 140:	40 ea       	ldi	r20, 0xA0	; 160
 142:	50 e4       	ldi	r21, 0x40	; 64
 144:	0e 94 ac 02 	call	0x558	; 0x558 <__mulsf3>
 148:	20 e0       	ldi	r18, 0x00	; 0
 14a:	30 ec       	ldi	r19, 0xC0	; 192
 14c:	4f e7       	ldi	r20, 0x7F	; 127
 14e:	54 e4       	ldi	r21, 0x44	; 68
 150:	0e 94 59 01 	call	0x2b2	; 0x2b2 <__divsf3>
 154:	6b 01       	movw	r12, r22
 156:	7c 01       	movw	r14, r24
	data = (unsigned int)(vin*1000);
 158:	20 e0       	ldi	r18, 0x00	; 0
 15a:	30 e0       	ldi	r19, 0x00	; 0
 15c:	4a e7       	ldi	r20, 0x7A	; 122
 15e:	54 e4       	ldi	r21, 0x44	; 68
 160:	0e 94 ac 02 	call	0x558	; 0x558 <__mulsf3>
 164:	0e 94 cb 01 	call	0x396	; 0x396 <__fixunssfsi>
 168:	ab 01       	movw	r20, r22
}
*/

float send_vtg_lcd(unsigned int data)
{
	unsigned char i =3, ascii_val[4] = "0000";
 16a:	13 e0       	ldi	r17, 0x03	; 3
	float vin;
	
	vin = (data*5.0)/1023;
	data = (unsigned int)(vin*1000);
	
	while(data > 0)
 16c:	2d c0       	rjmp	.+90     	; 0x1c8 <send_vtg_lcd+0xb8>
	{
		ascii_val[i] = 48 + data % 10;
 16e:	9a 01       	movw	r18, r20
 170:	ad ec       	ldi	r26, 0xCD	; 205
 172:	bc ec       	ldi	r27, 0xCC	; 204
 174:	0e 94 19 03 	call	0x632	; 0x632 <__umulhisi3>
 178:	96 95       	lsr	r25
 17a:	87 95       	ror	r24
 17c:	96 95       	lsr	r25
 17e:	87 95       	ror	r24
 180:	96 95       	lsr	r25
 182:	87 95       	ror	r24
 184:	9c 01       	movw	r18, r24
 186:	22 0f       	add	r18, r18
 188:	33 1f       	adc	r19, r19
 18a:	88 0f       	add	r24, r24
 18c:	99 1f       	adc	r25, r25
 18e:	88 0f       	add	r24, r24
 190:	99 1f       	adc	r25, r25
 192:	88 0f       	add	r24, r24
 194:	99 1f       	adc	r25, r25
 196:	82 0f       	add	r24, r18
 198:	93 1f       	adc	r25, r19
 19a:	9a 01       	movw	r18, r20
 19c:	28 1b       	sub	r18, r24
 19e:	39 0b       	sbc	r19, r25
 1a0:	c9 01       	movw	r24, r18
 1a2:	e1 e0       	ldi	r30, 0x01	; 1
 1a4:	f0 e0       	ldi	r31, 0x00	; 0
 1a6:	ec 0f       	add	r30, r28
 1a8:	fd 1f       	adc	r31, r29
 1aa:	e1 0f       	add	r30, r17
 1ac:	f1 1d       	adc	r31, r1
 1ae:	80 5d       	subi	r24, 0xD0	; 208
 1b0:	80 83       	st	Z, r24
		data = data/10;
 1b2:	9a 01       	movw	r18, r20
 1b4:	0e 94 19 03 	call	0x632	; 0x632 <__umulhisi3>
 1b8:	ac 01       	movw	r20, r24
 1ba:	56 95       	lsr	r21
 1bc:	47 95       	ror	r20
 1be:	56 95       	lsr	r21
 1c0:	47 95       	ror	r20
 1c2:	56 95       	lsr	r21
 1c4:	47 95       	ror	r20
		i--;
 1c6:	11 50       	subi	r17, 0x01	; 1
	float vin;
	
	vin = (data*5.0)/1023;
	data = (unsigned int)(vin*1000);
	
	while(data > 0)
 1c8:	41 15       	cp	r20, r1
 1ca:	51 05       	cpc	r21, r1
 1cc:	81 f6       	brne	.-96     	; 0x16e <send_vtg_lcd+0x5e>
		data = data/10;
		i--;
	}
	
	// send ascii value to lcd
	lcd_data(ascii_val[0]);
 1ce:	89 81       	ldd	r24, Y+1	; 0x01
 1d0:	0e 94 52 00 	call	0xa4	; 0xa4 <lcd_data>
	lcd_data('.');
 1d4:	8e e2       	ldi	r24, 0x2E	; 46
 1d6:	0e 94 52 00 	call	0xa4	; 0xa4 <lcd_data>
	lcd_data(ascii_val[1]);
 1da:	8a 81       	ldd	r24, Y+2	; 0x02
 1dc:	0e 94 52 00 	call	0xa4	; 0xa4 <lcd_data>
	lcd_data(ascii_val[2]);
 1e0:	8b 81       	ldd	r24, Y+3	; 0x03
 1e2:	0e 94 52 00 	call	0xa4	; 0xa4 <lcd_data>
	lcd_data(ascii_val[3]);
 1e6:	8c 81       	ldd	r24, Y+4	; 0x04
 1e8:	0e 94 52 00 	call	0xa4	; 0xa4 <lcd_data>
	return(vin);
}
 1ec:	c7 01       	movw	r24, r14
 1ee:	b6 01       	movw	r22, r12
 1f0:	0f 90       	pop	r0
 1f2:	0f 90       	pop	r0
 1f4:	0f 90       	pop	r0
 1f6:	0f 90       	pop	r0
 1f8:	df 91       	pop	r29
 1fa:	cf 91       	pop	r28
 1fc:	1f 91       	pop	r17
 1fe:	ff 90       	pop	r15
 200:	ef 90       	pop	r14
 202:	df 90       	pop	r13
 204:	cf 90       	pop	r12
 206:	08 95       	ret

00000208 <main>:

int main(void)
{
    /* Replace with your application code */
	
	DDRC = 0xFF;
 208:	8f ef       	ldi	r24, 0xFF	; 255
 20a:	84 bb       	out	0x14, r24	; 20
	DDRB = 0xFF;
 20c:	87 bb       	out	0x17, r24	; 23
	DDRD = 0xFF;
 20e:	81 bb       	out	0x11, r24	; 17
	
	unsigned int adc_val = 0;
	float vot;
	
	adc_init();
 210:	0e 94 64 00 	call	0xc8	; 0xc8 <adc_init>
	
	lcd_cmd(0x38); //initialize the LCD
 214:	88 e3       	ldi	r24, 0x38	; 56
 216:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
 21a:	8f e2       	ldi	r24, 0x2F	; 47
 21c:	95 e7       	ldi	r25, 0x75	; 117
 21e:	01 97       	sbiw	r24, 0x01	; 1
 220:	f1 f7       	brne	.-4      	; 0x21e <main+0x16>
 222:	00 c0       	rjmp	.+0      	; 0x224 <main+0x1c>
 224:	00 00       	nop
	_delay_ms(10);
	
	lcd_cmd(0x0E); // displaying on cursor
 226:	8e e0       	ldi	r24, 0x0E	; 14
 228:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
 22c:	8f e2       	ldi	r24, 0x2F	; 47
 22e:	95 e7       	ldi	r25, 0x75	; 117
 230:	01 97       	sbiw	r24, 0x01	; 1
 232:	f1 f7       	brne	.-4      	; 0x230 <main+0x28>
 234:	00 c0       	rjmp	.+0      	; 0x236 <main+0x2e>
 236:	00 00       	nop
	_delay_ms(10);
	
	lcd_cmd(0x01);  //clear screen
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
 23e:	8f e2       	ldi	r24, 0x2F	; 47
 240:	95 e7       	ldi	r25, 0x75	; 117
 242:	01 97       	sbiw	r24, 0x01	; 1
 244:	f1 f7       	brne	.-4      	; 0x242 <main+0x3a>
 246:	00 c0       	rjmp	.+0      	; 0x248 <main+0x40>
 248:	00 00       	nop
	_delay_ms(10);
	
	lcd_cmd(0x80); // start cursor at beginning	
 24a:	80 e8       	ldi	r24, 0x80	; 128
 24c:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
	lcd_str("ADC Read Program");
 250:	80 e6       	ldi	r24, 0x60	; 96
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	0e 94 7b 00 	call	0xf6	; 0xf6 <lcd_str>
	
    lcd_cmd(0xC0); // start cursor at 2nd line
 258:	80 ec       	ldi	r24, 0xC0	; 192
 25a:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
	lcd_str("ADC Value: ");	
 25e:	81 e7       	ldi	r24, 0x71	; 113
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	0e 94 7b 00 	call	0xf6	; 0xf6 <lcd_str>
		
	lcd_cmd(0xCA);
 266:	8a ec       	ldi	r24, 0xCA	; 202
 268:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
	
	while (1)
	{
		adc_val = adc_read(0); 
 26c:	80 e0       	ldi	r24, 0x00	; 0
 26e:	0e 94 6a 00 	call	0xd4	; 0xd4 <adc_read>
		vot = send_vtg_lcd(adc_val);
 272:	0e 94 88 00 	call	0x110	; 0x110 <send_vtg_lcd>
		
		if(vot < 0.05)
 276:	2d ec       	ldi	r18, 0xCD	; 205
 278:	3c ec       	ldi	r19, 0xCC	; 204
 27a:	4c e4       	ldi	r20, 0x4C	; 76
 27c:	5d e3       	ldi	r21, 0x3D	; 61
 27e:	0e 94 54 01 	call	0x2a8	; 0x2a8 <__cmpsf2>
 282:	88 23       	and	r24, r24
 284:	1c f4       	brge	.+6      	; 0x28c <main+0x84>
		{
		 PORTD = 0x40;	
 286:	80 e4       	ldi	r24, 0x40	; 64
 288:	82 bb       	out	0x12, r24	; 18
 28a:	01 c0       	rjmp	.+2      	; 0x28e <main+0x86>
		}
		
		else
		{
			PORTD = 0x00;
 28c:	12 ba       	out	0x12, r1	; 18
		}
		
		lcd_cmd(0xCA);
 28e:	8a ec       	ldi	r24, 0xCA	; 202
 290:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
 294:	9f ef       	ldi	r25, 0xFF	; 255
 296:	2e e9       	ldi	r18, 0x9E	; 158
 298:	84 e2       	ldi	r24, 0x24	; 36
 29a:	91 50       	subi	r25, 0x01	; 1
 29c:	20 40       	sbci	r18, 0x00	; 0
 29e:	80 40       	sbci	r24, 0x00	; 0
 2a0:	e1 f7       	brne	.-8      	; 0x29a <main+0x92>
 2a2:	00 c0       	rjmp	.+0      	; 0x2a4 <main+0x9c>
 2a4:	00 00       	nop
 2a6:	e2 cf       	rjmp	.-60     	; 0x26c <main+0x64>

000002a8 <__cmpsf2>:
 2a8:	0e 94 37 02 	call	0x46e	; 0x46e <__fp_cmp>
 2ac:	08 f4       	brcc	.+2      	; 0x2b0 <__cmpsf2+0x8>
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	08 95       	ret

000002b2 <__divsf3>:
 2b2:	0e 94 6d 01 	call	0x2da	; 0x2da <__divsf3x>
 2b6:	0c 94 72 02 	jmp	0x4e4	; 0x4e4 <__fp_round>
 2ba:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <__fp_pscB>
 2be:	58 f0       	brcs	.+22     	; 0x2d6 <__divsf3+0x24>
 2c0:	0e 94 64 02 	call	0x4c8	; 0x4c8 <__fp_pscA>
 2c4:	40 f0       	brcs	.+16     	; 0x2d6 <__divsf3+0x24>
 2c6:	29 f4       	brne	.+10     	; 0x2d2 <__divsf3+0x20>
 2c8:	5f 3f       	cpi	r21, 0xFF	; 255
 2ca:	29 f0       	breq	.+10     	; 0x2d6 <__divsf3+0x24>
 2cc:	0c 94 5b 02 	jmp	0x4b6	; 0x4b6 <__fp_inf>
 2d0:	51 11       	cpse	r21, r1
 2d2:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__fp_szero>
 2d6:	0c 94 61 02 	jmp	0x4c2	; 0x4c2 <__fp_nan>

000002da <__divsf3x>:
 2da:	0e 94 83 02 	call	0x506	; 0x506 <__fp_split3>
 2de:	68 f3       	brcs	.-38     	; 0x2ba <__divsf3+0x8>

000002e0 <__divsf3_pse>:
 2e0:	99 23       	and	r25, r25
 2e2:	b1 f3       	breq	.-20     	; 0x2d0 <__divsf3+0x1e>
 2e4:	55 23       	and	r21, r21
 2e6:	91 f3       	breq	.-28     	; 0x2cc <__divsf3+0x1a>
 2e8:	95 1b       	sub	r25, r21
 2ea:	55 0b       	sbc	r21, r21
 2ec:	bb 27       	eor	r27, r27
 2ee:	aa 27       	eor	r26, r26
 2f0:	62 17       	cp	r22, r18
 2f2:	73 07       	cpc	r23, r19
 2f4:	84 07       	cpc	r24, r20
 2f6:	38 f0       	brcs	.+14     	; 0x306 <__divsf3_pse+0x26>
 2f8:	9f 5f       	subi	r25, 0xFF	; 255
 2fa:	5f 4f       	sbci	r21, 0xFF	; 255
 2fc:	22 0f       	add	r18, r18
 2fe:	33 1f       	adc	r19, r19
 300:	44 1f       	adc	r20, r20
 302:	aa 1f       	adc	r26, r26
 304:	a9 f3       	breq	.-22     	; 0x2f0 <__divsf3_pse+0x10>
 306:	35 d0       	rcall	.+106    	; 0x372 <__divsf3_pse+0x92>
 308:	0e 2e       	mov	r0, r30
 30a:	3a f0       	brmi	.+14     	; 0x31a <__divsf3_pse+0x3a>
 30c:	e0 e8       	ldi	r30, 0x80	; 128
 30e:	32 d0       	rcall	.+100    	; 0x374 <__divsf3_pse+0x94>
 310:	91 50       	subi	r25, 0x01	; 1
 312:	50 40       	sbci	r21, 0x00	; 0
 314:	e6 95       	lsr	r30
 316:	00 1c       	adc	r0, r0
 318:	ca f7       	brpl	.-14     	; 0x30c <__divsf3_pse+0x2c>
 31a:	2b d0       	rcall	.+86     	; 0x372 <__divsf3_pse+0x92>
 31c:	fe 2f       	mov	r31, r30
 31e:	29 d0       	rcall	.+82     	; 0x372 <__divsf3_pse+0x92>
 320:	66 0f       	add	r22, r22
 322:	77 1f       	adc	r23, r23
 324:	88 1f       	adc	r24, r24
 326:	bb 1f       	adc	r27, r27
 328:	26 17       	cp	r18, r22
 32a:	37 07       	cpc	r19, r23
 32c:	48 07       	cpc	r20, r24
 32e:	ab 07       	cpc	r26, r27
 330:	b0 e8       	ldi	r27, 0x80	; 128
 332:	09 f0       	breq	.+2      	; 0x336 <__divsf3_pse+0x56>
 334:	bb 0b       	sbc	r27, r27
 336:	80 2d       	mov	r24, r0
 338:	bf 01       	movw	r22, r30
 33a:	ff 27       	eor	r31, r31
 33c:	93 58       	subi	r25, 0x83	; 131
 33e:	5f 4f       	sbci	r21, 0xFF	; 255
 340:	3a f0       	brmi	.+14     	; 0x350 <__divsf3_pse+0x70>
 342:	9e 3f       	cpi	r25, 0xFE	; 254
 344:	51 05       	cpc	r21, r1
 346:	78 f0       	brcs	.+30     	; 0x366 <__divsf3_pse+0x86>
 348:	0c 94 5b 02 	jmp	0x4b6	; 0x4b6 <__fp_inf>
 34c:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__fp_szero>
 350:	5f 3f       	cpi	r21, 0xFF	; 255
 352:	e4 f3       	brlt	.-8      	; 0x34c <__divsf3_pse+0x6c>
 354:	98 3e       	cpi	r25, 0xE8	; 232
 356:	d4 f3       	brlt	.-12     	; 0x34c <__divsf3_pse+0x6c>
 358:	86 95       	lsr	r24
 35a:	77 95       	ror	r23
 35c:	67 95       	ror	r22
 35e:	b7 95       	ror	r27
 360:	f7 95       	ror	r31
 362:	9f 5f       	subi	r25, 0xFF	; 255
 364:	c9 f7       	brne	.-14     	; 0x358 <__divsf3_pse+0x78>
 366:	88 0f       	add	r24, r24
 368:	91 1d       	adc	r25, r1
 36a:	96 95       	lsr	r25
 36c:	87 95       	ror	r24
 36e:	97 f9       	bld	r25, 7
 370:	08 95       	ret
 372:	e1 e0       	ldi	r30, 0x01	; 1
 374:	66 0f       	add	r22, r22
 376:	77 1f       	adc	r23, r23
 378:	88 1f       	adc	r24, r24
 37a:	bb 1f       	adc	r27, r27
 37c:	62 17       	cp	r22, r18
 37e:	73 07       	cpc	r23, r19
 380:	84 07       	cpc	r24, r20
 382:	ba 07       	cpc	r27, r26
 384:	20 f0       	brcs	.+8      	; 0x38e <__divsf3_pse+0xae>
 386:	62 1b       	sub	r22, r18
 388:	73 0b       	sbc	r23, r19
 38a:	84 0b       	sbc	r24, r20
 38c:	ba 0b       	sbc	r27, r26
 38e:	ee 1f       	adc	r30, r30
 390:	88 f7       	brcc	.-30     	; 0x374 <__divsf3_pse+0x94>
 392:	e0 95       	com	r30
 394:	08 95       	ret

00000396 <__fixunssfsi>:
 396:	0e 94 8b 02 	call	0x516	; 0x516 <__fp_splitA>
 39a:	88 f0       	brcs	.+34     	; 0x3be <__fixunssfsi+0x28>
 39c:	9f 57       	subi	r25, 0x7F	; 127
 39e:	98 f0       	brcs	.+38     	; 0x3c6 <__fixunssfsi+0x30>
 3a0:	b9 2f       	mov	r27, r25
 3a2:	99 27       	eor	r25, r25
 3a4:	b7 51       	subi	r27, 0x17	; 23
 3a6:	b0 f0       	brcs	.+44     	; 0x3d4 <__fixunssfsi+0x3e>
 3a8:	e1 f0       	breq	.+56     	; 0x3e2 <__fixunssfsi+0x4c>
 3aa:	66 0f       	add	r22, r22
 3ac:	77 1f       	adc	r23, r23
 3ae:	88 1f       	adc	r24, r24
 3b0:	99 1f       	adc	r25, r25
 3b2:	1a f0       	brmi	.+6      	; 0x3ba <__fixunssfsi+0x24>
 3b4:	ba 95       	dec	r27
 3b6:	c9 f7       	brne	.-14     	; 0x3aa <__fixunssfsi+0x14>
 3b8:	14 c0       	rjmp	.+40     	; 0x3e2 <__fixunssfsi+0x4c>
 3ba:	b1 30       	cpi	r27, 0x01	; 1
 3bc:	91 f0       	breq	.+36     	; 0x3e2 <__fixunssfsi+0x4c>
 3be:	0e 94 a5 02 	call	0x54a	; 0x54a <__fp_zero>
 3c2:	b1 e0       	ldi	r27, 0x01	; 1
 3c4:	08 95       	ret
 3c6:	0c 94 a5 02 	jmp	0x54a	; 0x54a <__fp_zero>
 3ca:	67 2f       	mov	r22, r23
 3cc:	78 2f       	mov	r23, r24
 3ce:	88 27       	eor	r24, r24
 3d0:	b8 5f       	subi	r27, 0xF8	; 248
 3d2:	39 f0       	breq	.+14     	; 0x3e2 <__fixunssfsi+0x4c>
 3d4:	b9 3f       	cpi	r27, 0xF9	; 249
 3d6:	cc f3       	brlt	.-14     	; 0x3ca <__fixunssfsi+0x34>
 3d8:	86 95       	lsr	r24
 3da:	77 95       	ror	r23
 3dc:	67 95       	ror	r22
 3de:	b3 95       	inc	r27
 3e0:	d9 f7       	brne	.-10     	; 0x3d8 <__fixunssfsi+0x42>
 3e2:	3e f4       	brtc	.+14     	; 0x3f2 <__fixunssfsi+0x5c>
 3e4:	90 95       	com	r25
 3e6:	80 95       	com	r24
 3e8:	70 95       	com	r23
 3ea:	61 95       	neg	r22
 3ec:	7f 4f       	sbci	r23, 0xFF	; 255
 3ee:	8f 4f       	sbci	r24, 0xFF	; 255
 3f0:	9f 4f       	sbci	r25, 0xFF	; 255
 3f2:	08 95       	ret

000003f4 <__floatunsisf>:
 3f4:	e8 94       	clt
 3f6:	09 c0       	rjmp	.+18     	; 0x40a <__DATA_REGION_LENGTH__+0xa>

000003f8 <__floatsisf>:
 3f8:	97 fb       	bst	r25, 7
 3fa:	3e f4       	brtc	.+14     	; 0x40a <__DATA_REGION_LENGTH__+0xa>
 3fc:	90 95       	com	r25
 3fe:	80 95       	com	r24
 400:	70 95       	com	r23
 402:	61 95       	neg	r22
 404:	7f 4f       	sbci	r23, 0xFF	; 255
 406:	8f 4f       	sbci	r24, 0xFF	; 255
 408:	9f 4f       	sbci	r25, 0xFF	; 255
 40a:	99 23       	and	r25, r25
 40c:	a9 f0       	breq	.+42     	; 0x438 <__DATA_REGION_LENGTH__+0x38>
 40e:	f9 2f       	mov	r31, r25
 410:	96 e9       	ldi	r25, 0x96	; 150
 412:	bb 27       	eor	r27, r27
 414:	93 95       	inc	r25
 416:	f6 95       	lsr	r31
 418:	87 95       	ror	r24
 41a:	77 95       	ror	r23
 41c:	67 95       	ror	r22
 41e:	b7 95       	ror	r27
 420:	f1 11       	cpse	r31, r1
 422:	f8 cf       	rjmp	.-16     	; 0x414 <__DATA_REGION_LENGTH__+0x14>
 424:	fa f4       	brpl	.+62     	; 0x464 <__stack+0x5>
 426:	bb 0f       	add	r27, r27
 428:	11 f4       	brne	.+4      	; 0x42e <__DATA_REGION_LENGTH__+0x2e>
 42a:	60 ff       	sbrs	r22, 0
 42c:	1b c0       	rjmp	.+54     	; 0x464 <__stack+0x5>
 42e:	6f 5f       	subi	r22, 0xFF	; 255
 430:	7f 4f       	sbci	r23, 0xFF	; 255
 432:	8f 4f       	sbci	r24, 0xFF	; 255
 434:	9f 4f       	sbci	r25, 0xFF	; 255
 436:	16 c0       	rjmp	.+44     	; 0x464 <__stack+0x5>
 438:	88 23       	and	r24, r24
 43a:	11 f0       	breq	.+4      	; 0x440 <__DATA_REGION_LENGTH__+0x40>
 43c:	96 e9       	ldi	r25, 0x96	; 150
 43e:	11 c0       	rjmp	.+34     	; 0x462 <__stack+0x3>
 440:	77 23       	and	r23, r23
 442:	21 f0       	breq	.+8      	; 0x44c <__DATA_REGION_LENGTH__+0x4c>
 444:	9e e8       	ldi	r25, 0x8E	; 142
 446:	87 2f       	mov	r24, r23
 448:	76 2f       	mov	r23, r22
 44a:	05 c0       	rjmp	.+10     	; 0x456 <__DATA_REGION_LENGTH__+0x56>
 44c:	66 23       	and	r22, r22
 44e:	71 f0       	breq	.+28     	; 0x46c <__stack+0xd>
 450:	96 e8       	ldi	r25, 0x86	; 134
 452:	86 2f       	mov	r24, r22
 454:	70 e0       	ldi	r23, 0x00	; 0
 456:	60 e0       	ldi	r22, 0x00	; 0
 458:	2a f0       	brmi	.+10     	; 0x464 <__stack+0x5>
 45a:	9a 95       	dec	r25
 45c:	66 0f       	add	r22, r22
 45e:	77 1f       	adc	r23, r23
 460:	88 1f       	adc	r24, r24
 462:	da f7       	brpl	.-10     	; 0x45a <__DATA_REGION_LENGTH__+0x5a>
 464:	88 0f       	add	r24, r24
 466:	96 95       	lsr	r25
 468:	87 95       	ror	r24
 46a:	97 f9       	bld	r25, 7
 46c:	08 95       	ret

0000046e <__fp_cmp>:
 46e:	99 0f       	add	r25, r25
 470:	00 08       	sbc	r0, r0
 472:	55 0f       	add	r21, r21
 474:	aa 0b       	sbc	r26, r26
 476:	e0 e8       	ldi	r30, 0x80	; 128
 478:	fe ef       	ldi	r31, 0xFE	; 254
 47a:	16 16       	cp	r1, r22
 47c:	17 06       	cpc	r1, r23
 47e:	e8 07       	cpc	r30, r24
 480:	f9 07       	cpc	r31, r25
 482:	c0 f0       	brcs	.+48     	; 0x4b4 <__fp_cmp+0x46>
 484:	12 16       	cp	r1, r18
 486:	13 06       	cpc	r1, r19
 488:	e4 07       	cpc	r30, r20
 48a:	f5 07       	cpc	r31, r21
 48c:	98 f0       	brcs	.+38     	; 0x4b4 <__fp_cmp+0x46>
 48e:	62 1b       	sub	r22, r18
 490:	73 0b       	sbc	r23, r19
 492:	84 0b       	sbc	r24, r20
 494:	95 0b       	sbc	r25, r21
 496:	39 f4       	brne	.+14     	; 0x4a6 <__fp_cmp+0x38>
 498:	0a 26       	eor	r0, r26
 49a:	61 f0       	breq	.+24     	; 0x4b4 <__fp_cmp+0x46>
 49c:	23 2b       	or	r18, r19
 49e:	24 2b       	or	r18, r20
 4a0:	25 2b       	or	r18, r21
 4a2:	21 f4       	brne	.+8      	; 0x4ac <__fp_cmp+0x3e>
 4a4:	08 95       	ret
 4a6:	0a 26       	eor	r0, r26
 4a8:	09 f4       	brne	.+2      	; 0x4ac <__fp_cmp+0x3e>
 4aa:	a1 40       	sbci	r26, 0x01	; 1
 4ac:	a6 95       	lsr	r26
 4ae:	8f ef       	ldi	r24, 0xFF	; 255
 4b0:	81 1d       	adc	r24, r1
 4b2:	81 1d       	adc	r24, r1
 4b4:	08 95       	ret

000004b6 <__fp_inf>:
 4b6:	97 f9       	bld	r25, 7
 4b8:	9f 67       	ori	r25, 0x7F	; 127
 4ba:	80 e8       	ldi	r24, 0x80	; 128
 4bc:	70 e0       	ldi	r23, 0x00	; 0
 4be:	60 e0       	ldi	r22, 0x00	; 0
 4c0:	08 95       	ret

000004c2 <__fp_nan>:
 4c2:	9f ef       	ldi	r25, 0xFF	; 255
 4c4:	80 ec       	ldi	r24, 0xC0	; 192
 4c6:	08 95       	ret

000004c8 <__fp_pscA>:
 4c8:	00 24       	eor	r0, r0
 4ca:	0a 94       	dec	r0
 4cc:	16 16       	cp	r1, r22
 4ce:	17 06       	cpc	r1, r23
 4d0:	18 06       	cpc	r1, r24
 4d2:	09 06       	cpc	r0, r25
 4d4:	08 95       	ret

000004d6 <__fp_pscB>:
 4d6:	00 24       	eor	r0, r0
 4d8:	0a 94       	dec	r0
 4da:	12 16       	cp	r1, r18
 4dc:	13 06       	cpc	r1, r19
 4de:	14 06       	cpc	r1, r20
 4e0:	05 06       	cpc	r0, r21
 4e2:	08 95       	ret

000004e4 <__fp_round>:
 4e4:	09 2e       	mov	r0, r25
 4e6:	03 94       	inc	r0
 4e8:	00 0c       	add	r0, r0
 4ea:	11 f4       	brne	.+4      	; 0x4f0 <__fp_round+0xc>
 4ec:	88 23       	and	r24, r24
 4ee:	52 f0       	brmi	.+20     	; 0x504 <__fp_round+0x20>
 4f0:	bb 0f       	add	r27, r27
 4f2:	40 f4       	brcc	.+16     	; 0x504 <__fp_round+0x20>
 4f4:	bf 2b       	or	r27, r31
 4f6:	11 f4       	brne	.+4      	; 0x4fc <__fp_round+0x18>
 4f8:	60 ff       	sbrs	r22, 0
 4fa:	04 c0       	rjmp	.+8      	; 0x504 <__fp_round+0x20>
 4fc:	6f 5f       	subi	r22, 0xFF	; 255
 4fe:	7f 4f       	sbci	r23, 0xFF	; 255
 500:	8f 4f       	sbci	r24, 0xFF	; 255
 502:	9f 4f       	sbci	r25, 0xFF	; 255
 504:	08 95       	ret

00000506 <__fp_split3>:
 506:	57 fd       	sbrc	r21, 7
 508:	90 58       	subi	r25, 0x80	; 128
 50a:	44 0f       	add	r20, r20
 50c:	55 1f       	adc	r21, r21
 50e:	59 f0       	breq	.+22     	; 0x526 <__fp_splitA+0x10>
 510:	5f 3f       	cpi	r21, 0xFF	; 255
 512:	71 f0       	breq	.+28     	; 0x530 <__fp_splitA+0x1a>
 514:	47 95       	ror	r20

00000516 <__fp_splitA>:
 516:	88 0f       	add	r24, r24
 518:	97 fb       	bst	r25, 7
 51a:	99 1f       	adc	r25, r25
 51c:	61 f0       	breq	.+24     	; 0x536 <__fp_splitA+0x20>
 51e:	9f 3f       	cpi	r25, 0xFF	; 255
 520:	79 f0       	breq	.+30     	; 0x540 <__fp_splitA+0x2a>
 522:	87 95       	ror	r24
 524:	08 95       	ret
 526:	12 16       	cp	r1, r18
 528:	13 06       	cpc	r1, r19
 52a:	14 06       	cpc	r1, r20
 52c:	55 1f       	adc	r21, r21
 52e:	f2 cf       	rjmp	.-28     	; 0x514 <__fp_split3+0xe>
 530:	46 95       	lsr	r20
 532:	f1 df       	rcall	.-30     	; 0x516 <__fp_splitA>
 534:	08 c0       	rjmp	.+16     	; 0x546 <__fp_splitA+0x30>
 536:	16 16       	cp	r1, r22
 538:	17 06       	cpc	r1, r23
 53a:	18 06       	cpc	r1, r24
 53c:	99 1f       	adc	r25, r25
 53e:	f1 cf       	rjmp	.-30     	; 0x522 <__fp_splitA+0xc>
 540:	86 95       	lsr	r24
 542:	71 05       	cpc	r23, r1
 544:	61 05       	cpc	r22, r1
 546:	08 94       	sec
 548:	08 95       	ret

0000054a <__fp_zero>:
 54a:	e8 94       	clt

0000054c <__fp_szero>:
 54c:	bb 27       	eor	r27, r27
 54e:	66 27       	eor	r22, r22
 550:	77 27       	eor	r23, r23
 552:	cb 01       	movw	r24, r22
 554:	97 f9       	bld	r25, 7
 556:	08 95       	ret

00000558 <__mulsf3>:
 558:	0e 94 bf 02 	call	0x57e	; 0x57e <__mulsf3x>
 55c:	0c 94 72 02 	jmp	0x4e4	; 0x4e4 <__fp_round>
 560:	0e 94 64 02 	call	0x4c8	; 0x4c8 <__fp_pscA>
 564:	38 f0       	brcs	.+14     	; 0x574 <__mulsf3+0x1c>
 566:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <__fp_pscB>
 56a:	20 f0       	brcs	.+8      	; 0x574 <__mulsf3+0x1c>
 56c:	95 23       	and	r25, r21
 56e:	11 f0       	breq	.+4      	; 0x574 <__mulsf3+0x1c>
 570:	0c 94 5b 02 	jmp	0x4b6	; 0x4b6 <__fp_inf>
 574:	0c 94 61 02 	jmp	0x4c2	; 0x4c2 <__fp_nan>
 578:	11 24       	eor	r1, r1
 57a:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__fp_szero>

0000057e <__mulsf3x>:
 57e:	0e 94 83 02 	call	0x506	; 0x506 <__fp_split3>
 582:	70 f3       	brcs	.-36     	; 0x560 <__mulsf3+0x8>

00000584 <__mulsf3_pse>:
 584:	95 9f       	mul	r25, r21
 586:	c1 f3       	breq	.-16     	; 0x578 <__mulsf3+0x20>
 588:	95 0f       	add	r25, r21
 58a:	50 e0       	ldi	r21, 0x00	; 0
 58c:	55 1f       	adc	r21, r21
 58e:	62 9f       	mul	r22, r18
 590:	f0 01       	movw	r30, r0
 592:	72 9f       	mul	r23, r18
 594:	bb 27       	eor	r27, r27
 596:	f0 0d       	add	r31, r0
 598:	b1 1d       	adc	r27, r1
 59a:	63 9f       	mul	r22, r19
 59c:	aa 27       	eor	r26, r26
 59e:	f0 0d       	add	r31, r0
 5a0:	b1 1d       	adc	r27, r1
 5a2:	aa 1f       	adc	r26, r26
 5a4:	64 9f       	mul	r22, r20
 5a6:	66 27       	eor	r22, r22
 5a8:	b0 0d       	add	r27, r0
 5aa:	a1 1d       	adc	r26, r1
 5ac:	66 1f       	adc	r22, r22
 5ae:	82 9f       	mul	r24, r18
 5b0:	22 27       	eor	r18, r18
 5b2:	b0 0d       	add	r27, r0
 5b4:	a1 1d       	adc	r26, r1
 5b6:	62 1f       	adc	r22, r18
 5b8:	73 9f       	mul	r23, r19
 5ba:	b0 0d       	add	r27, r0
 5bc:	a1 1d       	adc	r26, r1
 5be:	62 1f       	adc	r22, r18
 5c0:	83 9f       	mul	r24, r19
 5c2:	a0 0d       	add	r26, r0
 5c4:	61 1d       	adc	r22, r1
 5c6:	22 1f       	adc	r18, r18
 5c8:	74 9f       	mul	r23, r20
 5ca:	33 27       	eor	r19, r19
 5cc:	a0 0d       	add	r26, r0
 5ce:	61 1d       	adc	r22, r1
 5d0:	23 1f       	adc	r18, r19
 5d2:	84 9f       	mul	r24, r20
 5d4:	60 0d       	add	r22, r0
 5d6:	21 1d       	adc	r18, r1
 5d8:	82 2f       	mov	r24, r18
 5da:	76 2f       	mov	r23, r22
 5dc:	6a 2f       	mov	r22, r26
 5de:	11 24       	eor	r1, r1
 5e0:	9f 57       	subi	r25, 0x7F	; 127
 5e2:	50 40       	sbci	r21, 0x00	; 0
 5e4:	9a f0       	brmi	.+38     	; 0x60c <__mulsf3_pse+0x88>
 5e6:	f1 f0       	breq	.+60     	; 0x624 <__mulsf3_pse+0xa0>
 5e8:	88 23       	and	r24, r24
 5ea:	4a f0       	brmi	.+18     	; 0x5fe <__mulsf3_pse+0x7a>
 5ec:	ee 0f       	add	r30, r30
 5ee:	ff 1f       	adc	r31, r31
 5f0:	bb 1f       	adc	r27, r27
 5f2:	66 1f       	adc	r22, r22
 5f4:	77 1f       	adc	r23, r23
 5f6:	88 1f       	adc	r24, r24
 5f8:	91 50       	subi	r25, 0x01	; 1
 5fa:	50 40       	sbci	r21, 0x00	; 0
 5fc:	a9 f7       	brne	.-22     	; 0x5e8 <__mulsf3_pse+0x64>
 5fe:	9e 3f       	cpi	r25, 0xFE	; 254
 600:	51 05       	cpc	r21, r1
 602:	80 f0       	brcs	.+32     	; 0x624 <__mulsf3_pse+0xa0>
 604:	0c 94 5b 02 	jmp	0x4b6	; 0x4b6 <__fp_inf>
 608:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__fp_szero>
 60c:	5f 3f       	cpi	r21, 0xFF	; 255
 60e:	e4 f3       	brlt	.-8      	; 0x608 <__mulsf3_pse+0x84>
 610:	98 3e       	cpi	r25, 0xE8	; 232
 612:	d4 f3       	brlt	.-12     	; 0x608 <__mulsf3_pse+0x84>
 614:	86 95       	lsr	r24
 616:	77 95       	ror	r23
 618:	67 95       	ror	r22
 61a:	b7 95       	ror	r27
 61c:	f7 95       	ror	r31
 61e:	e7 95       	ror	r30
 620:	9f 5f       	subi	r25, 0xFF	; 255
 622:	c1 f7       	brne	.-16     	; 0x614 <__mulsf3_pse+0x90>
 624:	fe 2b       	or	r31, r30
 626:	88 0f       	add	r24, r24
 628:	91 1d       	adc	r25, r1
 62a:	96 95       	lsr	r25
 62c:	87 95       	ror	r24
 62e:	97 f9       	bld	r25, 7
 630:	08 95       	ret

00000632 <__umulhisi3>:
 632:	a2 9f       	mul	r26, r18
 634:	b0 01       	movw	r22, r0
 636:	b3 9f       	mul	r27, r19
 638:	c0 01       	movw	r24, r0
 63a:	a3 9f       	mul	r26, r19
 63c:	70 0d       	add	r23, r0
 63e:	81 1d       	adc	r24, r1
 640:	11 24       	eor	r1, r1
 642:	91 1d       	adc	r25, r1
 644:	b2 9f       	mul	r27, r18
 646:	70 0d       	add	r23, r0
 648:	81 1d       	adc	r24, r1
 64a:	11 24       	eor	r1, r1
 64c:	91 1d       	adc	r25, r1
 64e:	08 95       	ret

00000650 <_exit>:
 650:	f8 94       	cli

00000652 <__stop_program>:
 652:	ff cf       	rjmp	.-2      	; 0x652 <__stop_program>
