
ADC_Interfacing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005d0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  000005d0  00000644  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000662  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000694  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  000006d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a5d  00000000  00000000  00000720  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006f3  00000000  00000000  0000117d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000040a  00000000  00000000  00001870  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a8  00000000  00000000  00001c7c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000039f  00000000  00000000  00001d24  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000419  00000000  00000000  000020c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  000024dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ed       	ldi	r30, 0xD0	; 208
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 37       	cpi	r26, 0x7E	; 126
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 f8 00 	call	0x1f0	; 0x1f0 <main>
  7a:	0c 94 e6 02 	jmp	0x5cc	; 0x5cc <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <lcd_cmd>:


void lcd_cmd(unsigned char cmd)
{

	PORTB = cmd;
  82:	88 bb       	out	0x18, r24	; 24
	
	PORTC = 0x04;
  84:	84 e0       	ldi	r24, 0x04	; 4
  86:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  88:	8f e2       	ldi	r24, 0x2F	; 47
  8a:	95 e7       	ldi	r25, 0x75	; 117
  8c:	01 97       	sbiw	r24, 0x01	; 1
  8e:	f1 f7       	brne	.-4      	; 0x8c <lcd_cmd+0xa>
  90:	00 c0       	rjmp	.+0      	; 0x92 <lcd_cmd+0x10>
  92:	00 00       	nop
	_delay_ms(10);
	
	PORTC = 0x00;
  94:	15 ba       	out	0x15, r1	; 21
  96:	8f e2       	ldi	r24, 0x2F	; 47
  98:	95 e7       	ldi	r25, 0x75	; 117
  9a:	01 97       	sbiw	r24, 0x01	; 1
  9c:	f1 f7       	brne	.-4      	; 0x9a <lcd_cmd+0x18>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <lcd_cmd+0x1e>
  a0:	00 00       	nop
  a2:	08 95       	ret

000000a4 <lcd_data>:
}

void lcd_data(unsigned char data)
{
	
	PORTB = data;
  a4:	88 bb       	out	0x18, r24	; 24
	
	PORTC = 0x05;
  a6:	85 e0       	ldi	r24, 0x05	; 5
  a8:	85 bb       	out	0x15, r24	; 21
  aa:	8f e2       	ldi	r24, 0x2F	; 47
  ac:	95 e7       	ldi	r25, 0x75	; 117
  ae:	01 97       	sbiw	r24, 0x01	; 1
  b0:	f1 f7       	brne	.-4      	; 0xae <lcd_data+0xa>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <lcd_data+0x10>
  b4:	00 00       	nop
	_delay_ms(10);
	
	PORTC = 0X01;
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	85 bb       	out	0x15, r24	; 21
  ba:	8f e2       	ldi	r24, 0x2F	; 47
  bc:	95 e7       	ldi	r25, 0x75	; 117
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <lcd_data+0x1a>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <lcd_data+0x20>
  c4:	00 00       	nop
  c6:	08 95       	ret

000000c8 <adc_init>:


//to initialize the ADC
void adc_init()
{
	DDRA = 0x00; //make ADC port as input
  c8:	1a ba       	out	0x1a, r1	; 26
	ADMUX = 0x40; // Vref=AVCC; select channel 0
  ca:	80 e4       	ldi	r24, 0x40	; 64
  cc:	87 b9       	out	0x07, r24	; 7
	ADCSRA = 0xc3; // enable ADC & start 1st dummy conversion; set ADC module prescalar; to 8 critical for accurate adc result
  ce:	83 ec       	ldi	r24, 0xC3	; 195
  d0:	86 b9       	out	0x06, r24	; 6
  d2:	08 95       	ret

000000d4 <adc_read>:


unsigned int adc_read(unsigned char ch)
{
	unsigned int low, high, adc_val;
	ADMUX |= ch;
  d4:	97 b1       	in	r25, 0x07	; 7
  d6:	89 2b       	or	r24, r25
  d8:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADSC);
  da:	86 b1       	in	r24, 0x06	; 6
  dc:	80 64       	ori	r24, 0x40	; 64
  de:	86 b9       	out	0x06, r24	; 6
	while (!(ADCSRA & 0x10));
  e0:	34 9b       	sbis	0x06, 4	; 6
  e2:	fe cf       	rjmp	.-4      	; 0xe0 <adc_read+0xc>
	ADCSRA |= 0x10;
  e4:	86 b1       	in	r24, 0x06	; 6
  e6:	80 61       	ori	r24, 0x10	; 16
  e8:	86 b9       	out	0x06, r24	; 6
	
	low = ADCL;
  ea:	24 b1       	in	r18, 0x04	; 4
	high = ((unsigned int)(ADCH << 8));
  ec:	35 b1       	in	r19, 0x05	; 5
  ee:	80 e0       	ldi	r24, 0x00	; 0
  f0:	93 2f       	mov	r25, r19
	adc_val = low | high;
	return(adc_val);
}
  f2:	82 2b       	or	r24, r18
  f4:	08 95       	ret

000000f6 <lcd_str>:


void lcd_str(unsigned char *p)
{
  f6:	cf 93       	push	r28
  f8:	df 93       	push	r29
  fa:	ec 01       	movw	r28, r24
		while(*p!='\0')
  fc:	03 c0       	rjmp	.+6      	; 0x104 <lcd_str+0xe>
		{
			lcd_data(*p);
  fe:	0e 94 52 00 	call	0xa4	; 0xa4 <lcd_data>
			p= p+1;
 102:	21 96       	adiw	r28, 0x01	; 1
}


void lcd_str(unsigned char *p)
{
		while(*p!='\0')
 104:	88 81       	ld	r24, Y
 106:	81 11       	cpse	r24, r1
 108:	fa cf       	rjmp	.-12     	; 0xfe <lcd_str+0x8>
		{
			lcd_data(*p);
			p= p+1;
		}
	
}
 10a:	df 91       	pop	r29
 10c:	cf 91       	pop	r28
 10e:	08 95       	ret

00000110 <send_vtg_lcd>:
	lcd_str(ascii_val);
}
*/

void send_vtg_lcd(unsigned int data)
{
 110:	1f 93       	push	r17
 112:	cf 93       	push	r28
 114:	df 93       	push	r29
 116:	00 d0       	rcall	.+0      	; 0x118 <send_vtg_lcd+0x8>
 118:	00 d0       	rcall	.+0      	; 0x11a <send_vtg_lcd+0xa>
 11a:	cd b7       	in	r28, 0x3d	; 61
 11c:	de b7       	in	r29, 0x3e	; 62
	unsigned char i =3, ascii_val[4] = "0000";
 11e:	20 e3       	ldi	r18, 0x30	; 48
 120:	30 e3       	ldi	r19, 0x30	; 48
 122:	3a 83       	std	Y+2, r19	; 0x02
 124:	29 83       	std	Y+1, r18	; 0x01
 126:	3c 83       	std	Y+4, r19	; 0x04
 128:	2b 83       	std	Y+3, r18	; 0x03
	float vin;
	
	vin = (data*5.0)/1023;
 12a:	bc 01       	movw	r22, r24
 12c:	80 e0       	ldi	r24, 0x00	; 0
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <__floatunsisf>
 134:	20 e0       	ldi	r18, 0x00	; 0
 136:	30 e0       	ldi	r19, 0x00	; 0
 138:	40 ea       	ldi	r20, 0xA0	; 160
 13a:	50 e4       	ldi	r21, 0x40	; 64
 13c:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <__mulsf3>
 140:	20 e0       	ldi	r18, 0x00	; 0
 142:	30 ec       	ldi	r19, 0xC0	; 192
 144:	4f e7       	ldi	r20, 0x7F	; 127
 146:	54 e4       	ldi	r21, 0x44	; 68
 148:	0e 94 3b 01 	call	0x276	; 0x276 <__divsf3>
	data = (unsigned int)(vin*1000);
 14c:	20 e0       	ldi	r18, 0x00	; 0
 14e:	30 e0       	ldi	r19, 0x00	; 0
 150:	4a e7       	ldi	r20, 0x7A	; 122
 152:	54 e4       	ldi	r21, 0x44	; 68
 154:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <__mulsf3>
 158:	0e 94 ad 01 	call	0x35a	; 0x35a <__fixunssfsi>
 15c:	ab 01       	movw	r20, r22
}
*/

void send_vtg_lcd(unsigned int data)
{
	unsigned char i =3, ascii_val[4] = "0000";
 15e:	13 e0       	ldi	r17, 0x03	; 3
	float vin;
	
	vin = (data*5.0)/1023;
	data = (unsigned int)(vin*1000);
	
	while(data > 0)
 160:	2d c0       	rjmp	.+90     	; 0x1bc <send_vtg_lcd+0xac>
	{
		ascii_val[i] = 48 + data % 10;
 162:	9a 01       	movw	r18, r20
 164:	ad ec       	ldi	r26, 0xCD	; 205
 166:	bc ec       	ldi	r27, 0xCC	; 204
 168:	0e 94 d7 02 	call	0x5ae	; 0x5ae <__umulhisi3>
 16c:	96 95       	lsr	r25
 16e:	87 95       	ror	r24
 170:	96 95       	lsr	r25
 172:	87 95       	ror	r24
 174:	96 95       	lsr	r25
 176:	87 95       	ror	r24
 178:	9c 01       	movw	r18, r24
 17a:	22 0f       	add	r18, r18
 17c:	33 1f       	adc	r19, r19
 17e:	88 0f       	add	r24, r24
 180:	99 1f       	adc	r25, r25
 182:	88 0f       	add	r24, r24
 184:	99 1f       	adc	r25, r25
 186:	88 0f       	add	r24, r24
 188:	99 1f       	adc	r25, r25
 18a:	82 0f       	add	r24, r18
 18c:	93 1f       	adc	r25, r19
 18e:	9a 01       	movw	r18, r20
 190:	28 1b       	sub	r18, r24
 192:	39 0b       	sbc	r19, r25
 194:	c9 01       	movw	r24, r18
 196:	e1 e0       	ldi	r30, 0x01	; 1
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	ec 0f       	add	r30, r28
 19c:	fd 1f       	adc	r31, r29
 19e:	e1 0f       	add	r30, r17
 1a0:	f1 1d       	adc	r31, r1
 1a2:	80 5d       	subi	r24, 0xD0	; 208
 1a4:	80 83       	st	Z, r24
		data = data/10;
 1a6:	9a 01       	movw	r18, r20
 1a8:	0e 94 d7 02 	call	0x5ae	; 0x5ae <__umulhisi3>
 1ac:	ac 01       	movw	r20, r24
 1ae:	56 95       	lsr	r21
 1b0:	47 95       	ror	r20
 1b2:	56 95       	lsr	r21
 1b4:	47 95       	ror	r20
 1b6:	56 95       	lsr	r21
 1b8:	47 95       	ror	r20
		i--;
 1ba:	11 50       	subi	r17, 0x01	; 1
	float vin;
	
	vin = (data*5.0)/1023;
	data = (unsigned int)(vin*1000);
	
	while(data > 0)
 1bc:	41 15       	cp	r20, r1
 1be:	51 05       	cpc	r21, r1
 1c0:	81 f6       	brne	.-96     	; 0x162 <send_vtg_lcd+0x52>
		data = data/10;
		i--;
	}
	
	// send ascii value to lcd
	lcd_data(ascii_val[0]);
 1c2:	89 81       	ldd	r24, Y+1	; 0x01
 1c4:	0e 94 52 00 	call	0xa4	; 0xa4 <lcd_data>
	lcd_data('.');
 1c8:	8e e2       	ldi	r24, 0x2E	; 46
 1ca:	0e 94 52 00 	call	0xa4	; 0xa4 <lcd_data>
	lcd_data(ascii_val[1]);
 1ce:	8a 81       	ldd	r24, Y+2	; 0x02
 1d0:	0e 94 52 00 	call	0xa4	; 0xa4 <lcd_data>
	lcd_data(ascii_val[2]);
 1d4:	8b 81       	ldd	r24, Y+3	; 0x03
 1d6:	0e 94 52 00 	call	0xa4	; 0xa4 <lcd_data>
	lcd_data(ascii_val[3]);
 1da:	8c 81       	ldd	r24, Y+4	; 0x04
 1dc:	0e 94 52 00 	call	0xa4	; 0xa4 <lcd_data>
}
 1e0:	0f 90       	pop	r0
 1e2:	0f 90       	pop	r0
 1e4:	0f 90       	pop	r0
 1e6:	0f 90       	pop	r0
 1e8:	df 91       	pop	r29
 1ea:	cf 91       	pop	r28
 1ec:	1f 91       	pop	r17
 1ee:	08 95       	ret

000001f0 <main>:

int main(void)
{
    /* Replace with your application code */
	
	DDRC = 0xFF;
 1f0:	8f ef       	ldi	r24, 0xFF	; 255
 1f2:	84 bb       	out	0x14, r24	; 20
	DDRB = 0xFF;
 1f4:	87 bb       	out	0x17, r24	; 23
	
	unsigned int adc_val = 0;
	adc_init();
 1f6:	0e 94 64 00 	call	0xc8	; 0xc8 <adc_init>
	
	lcd_cmd(0x38); //initialize the LCD
 1fa:	88 e3       	ldi	r24, 0x38	; 56
 1fc:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
 200:	8f e2       	ldi	r24, 0x2F	; 47
 202:	95 e7       	ldi	r25, 0x75	; 117
 204:	01 97       	sbiw	r24, 0x01	; 1
 206:	f1 f7       	brne	.-4      	; 0x204 <__EEPROM_REGION_LENGTH__+0x4>
 208:	00 c0       	rjmp	.+0      	; 0x20a <__EEPROM_REGION_LENGTH__+0xa>
 20a:	00 00       	nop
	_delay_ms(10);
	
	lcd_cmd(0x0E); // displaying on cursor
 20c:	8e e0       	ldi	r24, 0x0E	; 14
 20e:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
 212:	8f e2       	ldi	r24, 0x2F	; 47
 214:	95 e7       	ldi	r25, 0x75	; 117
 216:	01 97       	sbiw	r24, 0x01	; 1
 218:	f1 f7       	brne	.-4      	; 0x216 <__EEPROM_REGION_LENGTH__+0x16>
 21a:	00 c0       	rjmp	.+0      	; 0x21c <__EEPROM_REGION_LENGTH__+0x1c>
 21c:	00 00       	nop
	_delay_ms(10);
	
	lcd_cmd(0x01);  //clear screen
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
 224:	8f e2       	ldi	r24, 0x2F	; 47
 226:	95 e7       	ldi	r25, 0x75	; 117
 228:	01 97       	sbiw	r24, 0x01	; 1
 22a:	f1 f7       	brne	.-4      	; 0x228 <__EEPROM_REGION_LENGTH__+0x28>
 22c:	00 c0       	rjmp	.+0      	; 0x22e <__EEPROM_REGION_LENGTH__+0x2e>
 22e:	00 00       	nop
	_delay_ms(10);
	
	lcd_cmd(0x80); // start cursor at beginning	
 230:	80 e8       	ldi	r24, 0x80	; 128
 232:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
	lcd_str("ADC Read Program");
 236:	80 e6       	ldi	r24, 0x60	; 96
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	0e 94 7b 00 	call	0xf6	; 0xf6 <lcd_str>
	
    lcd_cmd(0xC0); // start cursor at 2nd line
 23e:	80 ec       	ldi	r24, 0xC0	; 192
 240:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
	lcd_str("ADC Value: ");	
 244:	81 e7       	ldi	r24, 0x71	; 113
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	0e 94 7b 00 	call	0xf6	; 0xf6 <lcd_str>
		
	lcd_cmd(0xCA);
 24c:	8a ec       	ldi	r24, 0xCA	; 202
 24e:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
	
	while (1)
	{
		adc_val = adc_read(0); 
 252:	80 e0       	ldi	r24, 0x00	; 0
 254:	0e 94 6a 00 	call	0xd4	; 0xd4 <adc_read>
		send_vtg_lcd(adc_val);
 258:	0e 94 88 00 	call	0x110	; 0x110 <send_vtg_lcd>
		lcd_cmd(0xCA);
 25c:	8a ec       	ldi	r24, 0xCA	; 202
 25e:	0e 94 41 00 	call	0x82	; 0x82 <lcd_cmd>
 262:	9f ef       	ldi	r25, 0xFF	; 255
 264:	2e e9       	ldi	r18, 0x9E	; 158
 266:	84 e2       	ldi	r24, 0x24	; 36
 268:	91 50       	subi	r25, 0x01	; 1
 26a:	20 40       	sbci	r18, 0x00	; 0
 26c:	80 40       	sbci	r24, 0x00	; 0
 26e:	e1 f7       	brne	.-8      	; 0x268 <__EEPROM_REGION_LENGTH__+0x68>
 270:	00 c0       	rjmp	.+0      	; 0x272 <__EEPROM_REGION_LENGTH__+0x72>
 272:	00 00       	nop
 274:	ee cf       	rjmp	.-36     	; 0x252 <__EEPROM_REGION_LENGTH__+0x52>

00000276 <__divsf3>:
 276:	0e 94 4f 01 	call	0x29e	; 0x29e <__divsf3x>
 27a:	0c 94 30 02 	jmp	0x460	; 0x460 <__fp_round>
 27e:	0e 94 29 02 	call	0x452	; 0x452 <__fp_pscB>
 282:	58 f0       	brcs	.+22     	; 0x29a <__divsf3+0x24>
 284:	0e 94 22 02 	call	0x444	; 0x444 <__fp_pscA>
 288:	40 f0       	brcs	.+16     	; 0x29a <__divsf3+0x24>
 28a:	29 f4       	brne	.+10     	; 0x296 <__divsf3+0x20>
 28c:	5f 3f       	cpi	r21, 0xFF	; 255
 28e:	29 f0       	breq	.+10     	; 0x29a <__divsf3+0x24>
 290:	0c 94 19 02 	jmp	0x432	; 0x432 <__fp_inf>
 294:	51 11       	cpse	r21, r1
 296:	0c 94 64 02 	jmp	0x4c8	; 0x4c8 <__fp_szero>
 29a:	0c 94 1f 02 	jmp	0x43e	; 0x43e <__fp_nan>

0000029e <__divsf3x>:
 29e:	0e 94 41 02 	call	0x482	; 0x482 <__fp_split3>
 2a2:	68 f3       	brcs	.-38     	; 0x27e <__divsf3+0x8>

000002a4 <__divsf3_pse>:
 2a4:	99 23       	and	r25, r25
 2a6:	b1 f3       	breq	.-20     	; 0x294 <__divsf3+0x1e>
 2a8:	55 23       	and	r21, r21
 2aa:	91 f3       	breq	.-28     	; 0x290 <__divsf3+0x1a>
 2ac:	95 1b       	sub	r25, r21
 2ae:	55 0b       	sbc	r21, r21
 2b0:	bb 27       	eor	r27, r27
 2b2:	aa 27       	eor	r26, r26
 2b4:	62 17       	cp	r22, r18
 2b6:	73 07       	cpc	r23, r19
 2b8:	84 07       	cpc	r24, r20
 2ba:	38 f0       	brcs	.+14     	; 0x2ca <__divsf3_pse+0x26>
 2bc:	9f 5f       	subi	r25, 0xFF	; 255
 2be:	5f 4f       	sbci	r21, 0xFF	; 255
 2c0:	22 0f       	add	r18, r18
 2c2:	33 1f       	adc	r19, r19
 2c4:	44 1f       	adc	r20, r20
 2c6:	aa 1f       	adc	r26, r26
 2c8:	a9 f3       	breq	.-22     	; 0x2b4 <__divsf3_pse+0x10>
 2ca:	35 d0       	rcall	.+106    	; 0x336 <__divsf3_pse+0x92>
 2cc:	0e 2e       	mov	r0, r30
 2ce:	3a f0       	brmi	.+14     	; 0x2de <__divsf3_pse+0x3a>
 2d0:	e0 e8       	ldi	r30, 0x80	; 128
 2d2:	32 d0       	rcall	.+100    	; 0x338 <__divsf3_pse+0x94>
 2d4:	91 50       	subi	r25, 0x01	; 1
 2d6:	50 40       	sbci	r21, 0x00	; 0
 2d8:	e6 95       	lsr	r30
 2da:	00 1c       	adc	r0, r0
 2dc:	ca f7       	brpl	.-14     	; 0x2d0 <__divsf3_pse+0x2c>
 2de:	2b d0       	rcall	.+86     	; 0x336 <__divsf3_pse+0x92>
 2e0:	fe 2f       	mov	r31, r30
 2e2:	29 d0       	rcall	.+82     	; 0x336 <__divsf3_pse+0x92>
 2e4:	66 0f       	add	r22, r22
 2e6:	77 1f       	adc	r23, r23
 2e8:	88 1f       	adc	r24, r24
 2ea:	bb 1f       	adc	r27, r27
 2ec:	26 17       	cp	r18, r22
 2ee:	37 07       	cpc	r19, r23
 2f0:	48 07       	cpc	r20, r24
 2f2:	ab 07       	cpc	r26, r27
 2f4:	b0 e8       	ldi	r27, 0x80	; 128
 2f6:	09 f0       	breq	.+2      	; 0x2fa <__divsf3_pse+0x56>
 2f8:	bb 0b       	sbc	r27, r27
 2fa:	80 2d       	mov	r24, r0
 2fc:	bf 01       	movw	r22, r30
 2fe:	ff 27       	eor	r31, r31
 300:	93 58       	subi	r25, 0x83	; 131
 302:	5f 4f       	sbci	r21, 0xFF	; 255
 304:	3a f0       	brmi	.+14     	; 0x314 <__divsf3_pse+0x70>
 306:	9e 3f       	cpi	r25, 0xFE	; 254
 308:	51 05       	cpc	r21, r1
 30a:	78 f0       	brcs	.+30     	; 0x32a <__divsf3_pse+0x86>
 30c:	0c 94 19 02 	jmp	0x432	; 0x432 <__fp_inf>
 310:	0c 94 64 02 	jmp	0x4c8	; 0x4c8 <__fp_szero>
 314:	5f 3f       	cpi	r21, 0xFF	; 255
 316:	e4 f3       	brlt	.-8      	; 0x310 <__divsf3_pse+0x6c>
 318:	98 3e       	cpi	r25, 0xE8	; 232
 31a:	d4 f3       	brlt	.-12     	; 0x310 <__divsf3_pse+0x6c>
 31c:	86 95       	lsr	r24
 31e:	77 95       	ror	r23
 320:	67 95       	ror	r22
 322:	b7 95       	ror	r27
 324:	f7 95       	ror	r31
 326:	9f 5f       	subi	r25, 0xFF	; 255
 328:	c9 f7       	brne	.-14     	; 0x31c <__divsf3_pse+0x78>
 32a:	88 0f       	add	r24, r24
 32c:	91 1d       	adc	r25, r1
 32e:	96 95       	lsr	r25
 330:	87 95       	ror	r24
 332:	97 f9       	bld	r25, 7
 334:	08 95       	ret
 336:	e1 e0       	ldi	r30, 0x01	; 1
 338:	66 0f       	add	r22, r22
 33a:	77 1f       	adc	r23, r23
 33c:	88 1f       	adc	r24, r24
 33e:	bb 1f       	adc	r27, r27
 340:	62 17       	cp	r22, r18
 342:	73 07       	cpc	r23, r19
 344:	84 07       	cpc	r24, r20
 346:	ba 07       	cpc	r27, r26
 348:	20 f0       	brcs	.+8      	; 0x352 <__divsf3_pse+0xae>
 34a:	62 1b       	sub	r22, r18
 34c:	73 0b       	sbc	r23, r19
 34e:	84 0b       	sbc	r24, r20
 350:	ba 0b       	sbc	r27, r26
 352:	ee 1f       	adc	r30, r30
 354:	88 f7       	brcc	.-30     	; 0x338 <__divsf3_pse+0x94>
 356:	e0 95       	com	r30
 358:	08 95       	ret

0000035a <__fixunssfsi>:
 35a:	0e 94 49 02 	call	0x492	; 0x492 <__fp_splitA>
 35e:	88 f0       	brcs	.+34     	; 0x382 <__fixunssfsi+0x28>
 360:	9f 57       	subi	r25, 0x7F	; 127
 362:	98 f0       	brcs	.+38     	; 0x38a <__fixunssfsi+0x30>
 364:	b9 2f       	mov	r27, r25
 366:	99 27       	eor	r25, r25
 368:	b7 51       	subi	r27, 0x17	; 23
 36a:	b0 f0       	brcs	.+44     	; 0x398 <__fixunssfsi+0x3e>
 36c:	e1 f0       	breq	.+56     	; 0x3a6 <__fixunssfsi+0x4c>
 36e:	66 0f       	add	r22, r22
 370:	77 1f       	adc	r23, r23
 372:	88 1f       	adc	r24, r24
 374:	99 1f       	adc	r25, r25
 376:	1a f0       	brmi	.+6      	; 0x37e <__fixunssfsi+0x24>
 378:	ba 95       	dec	r27
 37a:	c9 f7       	brne	.-14     	; 0x36e <__fixunssfsi+0x14>
 37c:	14 c0       	rjmp	.+40     	; 0x3a6 <__fixunssfsi+0x4c>
 37e:	b1 30       	cpi	r27, 0x01	; 1
 380:	91 f0       	breq	.+36     	; 0x3a6 <__fixunssfsi+0x4c>
 382:	0e 94 63 02 	call	0x4c6	; 0x4c6 <__fp_zero>
 386:	b1 e0       	ldi	r27, 0x01	; 1
 388:	08 95       	ret
 38a:	0c 94 63 02 	jmp	0x4c6	; 0x4c6 <__fp_zero>
 38e:	67 2f       	mov	r22, r23
 390:	78 2f       	mov	r23, r24
 392:	88 27       	eor	r24, r24
 394:	b8 5f       	subi	r27, 0xF8	; 248
 396:	39 f0       	breq	.+14     	; 0x3a6 <__fixunssfsi+0x4c>
 398:	b9 3f       	cpi	r27, 0xF9	; 249
 39a:	cc f3       	brlt	.-14     	; 0x38e <__fixunssfsi+0x34>
 39c:	86 95       	lsr	r24
 39e:	77 95       	ror	r23
 3a0:	67 95       	ror	r22
 3a2:	b3 95       	inc	r27
 3a4:	d9 f7       	brne	.-10     	; 0x39c <__fixunssfsi+0x42>
 3a6:	3e f4       	brtc	.+14     	; 0x3b6 <__fixunssfsi+0x5c>
 3a8:	90 95       	com	r25
 3aa:	80 95       	com	r24
 3ac:	70 95       	com	r23
 3ae:	61 95       	neg	r22
 3b0:	7f 4f       	sbci	r23, 0xFF	; 255
 3b2:	8f 4f       	sbci	r24, 0xFF	; 255
 3b4:	9f 4f       	sbci	r25, 0xFF	; 255
 3b6:	08 95       	ret

000003b8 <__floatunsisf>:
 3b8:	e8 94       	clt
 3ba:	09 c0       	rjmp	.+18     	; 0x3ce <__floatsisf+0x12>

000003bc <__floatsisf>:
 3bc:	97 fb       	bst	r25, 7
 3be:	3e f4       	brtc	.+14     	; 0x3ce <__floatsisf+0x12>
 3c0:	90 95       	com	r25
 3c2:	80 95       	com	r24
 3c4:	70 95       	com	r23
 3c6:	61 95       	neg	r22
 3c8:	7f 4f       	sbci	r23, 0xFF	; 255
 3ca:	8f 4f       	sbci	r24, 0xFF	; 255
 3cc:	9f 4f       	sbci	r25, 0xFF	; 255
 3ce:	99 23       	and	r25, r25
 3d0:	a9 f0       	breq	.+42     	; 0x3fc <__floatsisf+0x40>
 3d2:	f9 2f       	mov	r31, r25
 3d4:	96 e9       	ldi	r25, 0x96	; 150
 3d6:	bb 27       	eor	r27, r27
 3d8:	93 95       	inc	r25
 3da:	f6 95       	lsr	r31
 3dc:	87 95       	ror	r24
 3de:	77 95       	ror	r23
 3e0:	67 95       	ror	r22
 3e2:	b7 95       	ror	r27
 3e4:	f1 11       	cpse	r31, r1
 3e6:	f8 cf       	rjmp	.-16     	; 0x3d8 <__floatsisf+0x1c>
 3e8:	fa f4       	brpl	.+62     	; 0x428 <__DATA_REGION_LENGTH__+0x28>
 3ea:	bb 0f       	add	r27, r27
 3ec:	11 f4       	brne	.+4      	; 0x3f2 <__floatsisf+0x36>
 3ee:	60 ff       	sbrs	r22, 0
 3f0:	1b c0       	rjmp	.+54     	; 0x428 <__DATA_REGION_LENGTH__+0x28>
 3f2:	6f 5f       	subi	r22, 0xFF	; 255
 3f4:	7f 4f       	sbci	r23, 0xFF	; 255
 3f6:	8f 4f       	sbci	r24, 0xFF	; 255
 3f8:	9f 4f       	sbci	r25, 0xFF	; 255
 3fa:	16 c0       	rjmp	.+44     	; 0x428 <__DATA_REGION_LENGTH__+0x28>
 3fc:	88 23       	and	r24, r24
 3fe:	11 f0       	breq	.+4      	; 0x404 <__DATA_REGION_LENGTH__+0x4>
 400:	96 e9       	ldi	r25, 0x96	; 150
 402:	11 c0       	rjmp	.+34     	; 0x426 <__DATA_REGION_LENGTH__+0x26>
 404:	77 23       	and	r23, r23
 406:	21 f0       	breq	.+8      	; 0x410 <__DATA_REGION_LENGTH__+0x10>
 408:	9e e8       	ldi	r25, 0x8E	; 142
 40a:	87 2f       	mov	r24, r23
 40c:	76 2f       	mov	r23, r22
 40e:	05 c0       	rjmp	.+10     	; 0x41a <__DATA_REGION_LENGTH__+0x1a>
 410:	66 23       	and	r22, r22
 412:	71 f0       	breq	.+28     	; 0x430 <__DATA_REGION_LENGTH__+0x30>
 414:	96 e8       	ldi	r25, 0x86	; 134
 416:	86 2f       	mov	r24, r22
 418:	70 e0       	ldi	r23, 0x00	; 0
 41a:	60 e0       	ldi	r22, 0x00	; 0
 41c:	2a f0       	brmi	.+10     	; 0x428 <__DATA_REGION_LENGTH__+0x28>
 41e:	9a 95       	dec	r25
 420:	66 0f       	add	r22, r22
 422:	77 1f       	adc	r23, r23
 424:	88 1f       	adc	r24, r24
 426:	da f7       	brpl	.-10     	; 0x41e <__DATA_REGION_LENGTH__+0x1e>
 428:	88 0f       	add	r24, r24
 42a:	96 95       	lsr	r25
 42c:	87 95       	ror	r24
 42e:	97 f9       	bld	r25, 7
 430:	08 95       	ret

00000432 <__fp_inf>:
 432:	97 f9       	bld	r25, 7
 434:	9f 67       	ori	r25, 0x7F	; 127
 436:	80 e8       	ldi	r24, 0x80	; 128
 438:	70 e0       	ldi	r23, 0x00	; 0
 43a:	60 e0       	ldi	r22, 0x00	; 0
 43c:	08 95       	ret

0000043e <__fp_nan>:
 43e:	9f ef       	ldi	r25, 0xFF	; 255
 440:	80 ec       	ldi	r24, 0xC0	; 192
 442:	08 95       	ret

00000444 <__fp_pscA>:
 444:	00 24       	eor	r0, r0
 446:	0a 94       	dec	r0
 448:	16 16       	cp	r1, r22
 44a:	17 06       	cpc	r1, r23
 44c:	18 06       	cpc	r1, r24
 44e:	09 06       	cpc	r0, r25
 450:	08 95       	ret

00000452 <__fp_pscB>:
 452:	00 24       	eor	r0, r0
 454:	0a 94       	dec	r0
 456:	12 16       	cp	r1, r18
 458:	13 06       	cpc	r1, r19
 45a:	14 06       	cpc	r1, r20
 45c:	05 06       	cpc	r0, r21
 45e:	08 95       	ret

00000460 <__fp_round>:
 460:	09 2e       	mov	r0, r25
 462:	03 94       	inc	r0
 464:	00 0c       	add	r0, r0
 466:	11 f4       	brne	.+4      	; 0x46c <__fp_round+0xc>
 468:	88 23       	and	r24, r24
 46a:	52 f0       	brmi	.+20     	; 0x480 <__fp_round+0x20>
 46c:	bb 0f       	add	r27, r27
 46e:	40 f4       	brcc	.+16     	; 0x480 <__fp_round+0x20>
 470:	bf 2b       	or	r27, r31
 472:	11 f4       	brne	.+4      	; 0x478 <__fp_round+0x18>
 474:	60 ff       	sbrs	r22, 0
 476:	04 c0       	rjmp	.+8      	; 0x480 <__fp_round+0x20>
 478:	6f 5f       	subi	r22, 0xFF	; 255
 47a:	7f 4f       	sbci	r23, 0xFF	; 255
 47c:	8f 4f       	sbci	r24, 0xFF	; 255
 47e:	9f 4f       	sbci	r25, 0xFF	; 255
 480:	08 95       	ret

00000482 <__fp_split3>:
 482:	57 fd       	sbrc	r21, 7
 484:	90 58       	subi	r25, 0x80	; 128
 486:	44 0f       	add	r20, r20
 488:	55 1f       	adc	r21, r21
 48a:	59 f0       	breq	.+22     	; 0x4a2 <__fp_splitA+0x10>
 48c:	5f 3f       	cpi	r21, 0xFF	; 255
 48e:	71 f0       	breq	.+28     	; 0x4ac <__fp_splitA+0x1a>
 490:	47 95       	ror	r20

00000492 <__fp_splitA>:
 492:	88 0f       	add	r24, r24
 494:	97 fb       	bst	r25, 7
 496:	99 1f       	adc	r25, r25
 498:	61 f0       	breq	.+24     	; 0x4b2 <__fp_splitA+0x20>
 49a:	9f 3f       	cpi	r25, 0xFF	; 255
 49c:	79 f0       	breq	.+30     	; 0x4bc <__fp_splitA+0x2a>
 49e:	87 95       	ror	r24
 4a0:	08 95       	ret
 4a2:	12 16       	cp	r1, r18
 4a4:	13 06       	cpc	r1, r19
 4a6:	14 06       	cpc	r1, r20
 4a8:	55 1f       	adc	r21, r21
 4aa:	f2 cf       	rjmp	.-28     	; 0x490 <__fp_split3+0xe>
 4ac:	46 95       	lsr	r20
 4ae:	f1 df       	rcall	.-30     	; 0x492 <__fp_splitA>
 4b0:	08 c0       	rjmp	.+16     	; 0x4c2 <__fp_splitA+0x30>
 4b2:	16 16       	cp	r1, r22
 4b4:	17 06       	cpc	r1, r23
 4b6:	18 06       	cpc	r1, r24
 4b8:	99 1f       	adc	r25, r25
 4ba:	f1 cf       	rjmp	.-30     	; 0x49e <__fp_splitA+0xc>
 4bc:	86 95       	lsr	r24
 4be:	71 05       	cpc	r23, r1
 4c0:	61 05       	cpc	r22, r1
 4c2:	08 94       	sec
 4c4:	08 95       	ret

000004c6 <__fp_zero>:
 4c6:	e8 94       	clt

000004c8 <__fp_szero>:
 4c8:	bb 27       	eor	r27, r27
 4ca:	66 27       	eor	r22, r22
 4cc:	77 27       	eor	r23, r23
 4ce:	cb 01       	movw	r24, r22
 4d0:	97 f9       	bld	r25, 7
 4d2:	08 95       	ret

000004d4 <__mulsf3>:
 4d4:	0e 94 7d 02 	call	0x4fa	; 0x4fa <__mulsf3x>
 4d8:	0c 94 30 02 	jmp	0x460	; 0x460 <__fp_round>
 4dc:	0e 94 22 02 	call	0x444	; 0x444 <__fp_pscA>
 4e0:	38 f0       	brcs	.+14     	; 0x4f0 <__mulsf3+0x1c>
 4e2:	0e 94 29 02 	call	0x452	; 0x452 <__fp_pscB>
 4e6:	20 f0       	brcs	.+8      	; 0x4f0 <__mulsf3+0x1c>
 4e8:	95 23       	and	r25, r21
 4ea:	11 f0       	breq	.+4      	; 0x4f0 <__mulsf3+0x1c>
 4ec:	0c 94 19 02 	jmp	0x432	; 0x432 <__fp_inf>
 4f0:	0c 94 1f 02 	jmp	0x43e	; 0x43e <__fp_nan>
 4f4:	11 24       	eor	r1, r1
 4f6:	0c 94 64 02 	jmp	0x4c8	; 0x4c8 <__fp_szero>

000004fa <__mulsf3x>:
 4fa:	0e 94 41 02 	call	0x482	; 0x482 <__fp_split3>
 4fe:	70 f3       	brcs	.-36     	; 0x4dc <__mulsf3+0x8>

00000500 <__mulsf3_pse>:
 500:	95 9f       	mul	r25, r21
 502:	c1 f3       	breq	.-16     	; 0x4f4 <__mulsf3+0x20>
 504:	95 0f       	add	r25, r21
 506:	50 e0       	ldi	r21, 0x00	; 0
 508:	55 1f       	adc	r21, r21
 50a:	62 9f       	mul	r22, r18
 50c:	f0 01       	movw	r30, r0
 50e:	72 9f       	mul	r23, r18
 510:	bb 27       	eor	r27, r27
 512:	f0 0d       	add	r31, r0
 514:	b1 1d       	adc	r27, r1
 516:	63 9f       	mul	r22, r19
 518:	aa 27       	eor	r26, r26
 51a:	f0 0d       	add	r31, r0
 51c:	b1 1d       	adc	r27, r1
 51e:	aa 1f       	adc	r26, r26
 520:	64 9f       	mul	r22, r20
 522:	66 27       	eor	r22, r22
 524:	b0 0d       	add	r27, r0
 526:	a1 1d       	adc	r26, r1
 528:	66 1f       	adc	r22, r22
 52a:	82 9f       	mul	r24, r18
 52c:	22 27       	eor	r18, r18
 52e:	b0 0d       	add	r27, r0
 530:	a1 1d       	adc	r26, r1
 532:	62 1f       	adc	r22, r18
 534:	73 9f       	mul	r23, r19
 536:	b0 0d       	add	r27, r0
 538:	a1 1d       	adc	r26, r1
 53a:	62 1f       	adc	r22, r18
 53c:	83 9f       	mul	r24, r19
 53e:	a0 0d       	add	r26, r0
 540:	61 1d       	adc	r22, r1
 542:	22 1f       	adc	r18, r18
 544:	74 9f       	mul	r23, r20
 546:	33 27       	eor	r19, r19
 548:	a0 0d       	add	r26, r0
 54a:	61 1d       	adc	r22, r1
 54c:	23 1f       	adc	r18, r19
 54e:	84 9f       	mul	r24, r20
 550:	60 0d       	add	r22, r0
 552:	21 1d       	adc	r18, r1
 554:	82 2f       	mov	r24, r18
 556:	76 2f       	mov	r23, r22
 558:	6a 2f       	mov	r22, r26
 55a:	11 24       	eor	r1, r1
 55c:	9f 57       	subi	r25, 0x7F	; 127
 55e:	50 40       	sbci	r21, 0x00	; 0
 560:	9a f0       	brmi	.+38     	; 0x588 <__mulsf3_pse+0x88>
 562:	f1 f0       	breq	.+60     	; 0x5a0 <__mulsf3_pse+0xa0>
 564:	88 23       	and	r24, r24
 566:	4a f0       	brmi	.+18     	; 0x57a <__mulsf3_pse+0x7a>
 568:	ee 0f       	add	r30, r30
 56a:	ff 1f       	adc	r31, r31
 56c:	bb 1f       	adc	r27, r27
 56e:	66 1f       	adc	r22, r22
 570:	77 1f       	adc	r23, r23
 572:	88 1f       	adc	r24, r24
 574:	91 50       	subi	r25, 0x01	; 1
 576:	50 40       	sbci	r21, 0x00	; 0
 578:	a9 f7       	brne	.-22     	; 0x564 <__mulsf3_pse+0x64>
 57a:	9e 3f       	cpi	r25, 0xFE	; 254
 57c:	51 05       	cpc	r21, r1
 57e:	80 f0       	brcs	.+32     	; 0x5a0 <__mulsf3_pse+0xa0>
 580:	0c 94 19 02 	jmp	0x432	; 0x432 <__fp_inf>
 584:	0c 94 64 02 	jmp	0x4c8	; 0x4c8 <__fp_szero>
 588:	5f 3f       	cpi	r21, 0xFF	; 255
 58a:	e4 f3       	brlt	.-8      	; 0x584 <__mulsf3_pse+0x84>
 58c:	98 3e       	cpi	r25, 0xE8	; 232
 58e:	d4 f3       	brlt	.-12     	; 0x584 <__mulsf3_pse+0x84>
 590:	86 95       	lsr	r24
 592:	77 95       	ror	r23
 594:	67 95       	ror	r22
 596:	b7 95       	ror	r27
 598:	f7 95       	ror	r31
 59a:	e7 95       	ror	r30
 59c:	9f 5f       	subi	r25, 0xFF	; 255
 59e:	c1 f7       	brne	.-16     	; 0x590 <__mulsf3_pse+0x90>
 5a0:	fe 2b       	or	r31, r30
 5a2:	88 0f       	add	r24, r24
 5a4:	91 1d       	adc	r25, r1
 5a6:	96 95       	lsr	r25
 5a8:	87 95       	ror	r24
 5aa:	97 f9       	bld	r25, 7
 5ac:	08 95       	ret

000005ae <__umulhisi3>:
 5ae:	a2 9f       	mul	r26, r18
 5b0:	b0 01       	movw	r22, r0
 5b2:	b3 9f       	mul	r27, r19
 5b4:	c0 01       	movw	r24, r0
 5b6:	a3 9f       	mul	r26, r19
 5b8:	70 0d       	add	r23, r0
 5ba:	81 1d       	adc	r24, r1
 5bc:	11 24       	eor	r1, r1
 5be:	91 1d       	adc	r25, r1
 5c0:	b2 9f       	mul	r27, r18
 5c2:	70 0d       	add	r23, r0
 5c4:	81 1d       	adc	r24, r1
 5c6:	11 24       	eor	r1, r1
 5c8:	91 1d       	adc	r25, r1
 5ca:	08 95       	ret

000005cc <_exit>:
 5cc:	f8 94       	cli

000005ce <__stop_program>:
 5ce:	ff cf       	rjmp	.-2      	; 0x5ce <__stop_program>
