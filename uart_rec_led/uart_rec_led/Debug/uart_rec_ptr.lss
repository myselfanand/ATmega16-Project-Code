
uart_rec_ptr.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001ea  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  000001ea  0000025e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000029e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002d0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  0000030c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007cc  00000000  00000000  00000354  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000065a  00000000  00000000  00000b20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000036c  00000000  00000000  0000117a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b4  00000000  00000000  000014e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000037a  00000000  00000000  0000159c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001fa  00000000  00000000  00001916  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001b10  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ee       	ldi	r30, 0xEA	; 234
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 3a       	cpi	r26, 0xA0	; 160
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 c4 00 	call	0x188	; 0x188 <main>
  7a:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <uart_init>:
#include <util/delay.h>


void uart_init()
{
UCSRA = 0x00;  //control register initialization
  82:	1b b8       	out	0x0b, r1	; 11
UCSRB = 0x18;  // enable transmitter & receiver
  84:	88 e1       	ldi	r24, 0x18	; 24
  86:	8a b9       	out	0x0a, r24	; 10
UCSRC = 0x86;  // async, no parity, 1 stop bit, 8 data bits
  88:	86 e8       	ldi	r24, 0x86	; 134
  8a:	80 bd       	out	0x20, r24	; 32
UBRRH = 0x00;  // baud rate initialization
  8c:	10 bc       	out	0x20, r1	; 32
UBRRL = 0x33; // 9600 baud rate	
  8e:	83 e3       	ldi	r24, 0x33	; 51
  90:	89 b9       	out	0x09, r24	; 9
  92:	08 95       	ret

00000094 <uart_transmit>:
}


void uart_transmit(unsigned char data)
{
	while((UCSRA & 0x20)==0x00) // wait for UDRE flag
  94:	5d 9b       	sbis	0x0b, 5	; 11
  96:	fe cf       	rjmp	.-4      	; 0x94 <uart_transmit>
	{
		;
	}
	UDR = data; //load data to UDR for transmission
  98:	8c b9       	out	0x0c, r24	; 12
  9a:	08 95       	ret

0000009c <uart_receive>:
}

unsigned char uart_receive()
{
	unsigned char d;
	while((UCSRA & 0x80)==0x00)
  9c:	5f 9b       	sbis	0x0b, 7	; 11
  9e:	fe cf       	rjmp	.-4      	; 0x9c <uart_receive>
	{
		;
	}
	d = UDR;
  a0:	8c b1       	in	r24, 0x0c	; 12
	return (d);
}
  a2:	08 95       	ret

000000a4 <data2>:

void data2()
{
  a4:	1f 93       	push	r17
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
  ae:	61 97       	sbiw	r28, 0x11	; 17
  b0:	0f b6       	in	r0, 0x3f	; 63
  b2:	f8 94       	cli
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	0f be       	out	0x3f, r0	; 63
  b8:	cd bf       	out	0x3d, r28	; 61
		unsigned char j = 0, b[] = {"LED1 TURNED ON!\r"};
  ba:	81 e1       	ldi	r24, 0x11	; 17
  bc:	e0 e6       	ldi	r30, 0x60	; 96
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	de 01       	movw	r26, r28
  c2:	11 96       	adiw	r26, 0x01	; 1
  c4:	01 90       	ld	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	8a 95       	dec	r24
  ca:	e1 f7       	brne	.-8      	; 0xc4 <data2+0x20>
  cc:	10 e0       	ldi	r17, 0x00	; 0
		
		while(b[j] != '\0')
  ce:	03 c0       	rjmp	.+6      	; 0xd6 <data2+0x32>
		{
			uart_transmit(b[j]);
  d0:	0e 94 4a 00 	call	0x94	; 0x94 <uart_transmit>
			j++;
  d4:	1f 5f       	subi	r17, 0xFF	; 255

void data2()
{
		unsigned char j = 0, b[] = {"LED1 TURNED ON!\r"};
		
		while(b[j] != '\0')
  d6:	e1 e0       	ldi	r30, 0x01	; 1
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	ec 0f       	add	r30, r28
  dc:	fd 1f       	adc	r31, r29
  de:	e1 0f       	add	r30, r17
  e0:	f1 1d       	adc	r31, r1
  e2:	80 81       	ld	r24, Z
  e4:	81 11       	cpse	r24, r1
  e6:	f4 cf       	rjmp	.-24     	; 0xd0 <data2+0x2c>
		{
			uart_transmit(b[j]);
			j++;
		}
		
	DDRA = 0xff;
  e8:	8f ef       	ldi	r24, 0xFF	; 255
  ea:	8a bb       	out	0x1a, r24	; 26
	
	PORTA = 0x01;
  ec:	81 e0       	ldi	r24, 0x01	; 1
  ee:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f0:	2f ef       	ldi	r18, 0xFF	; 255
  f2:	89 e6       	ldi	r24, 0x69	; 105
  f4:	98 e1       	ldi	r25, 0x18	; 24
  f6:	21 50       	subi	r18, 0x01	; 1
  f8:	80 40       	sbci	r24, 0x00	; 0
  fa:	90 40       	sbci	r25, 0x00	; 0
  fc:	e1 f7       	brne	.-8      	; 0xf6 <data2+0x52>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <data2+0x5c>
 100:	00 00       	nop
	_delay_ms(1000);
}
 102:	61 96       	adiw	r28, 0x11	; 17
 104:	0f b6       	in	r0, 0x3f	; 63
 106:	f8 94       	cli
 108:	de bf       	out	0x3e, r29	; 62
 10a:	0f be       	out	0x3f, r0	; 63
 10c:	cd bf       	out	0x3d, r28	; 61
 10e:	df 91       	pop	r29
 110:	cf 91       	pop	r28
 112:	1f 91       	pop	r17
 114:	08 95       	ret

00000116 <data3>:

void data3()
{
 116:	1f 93       	push	r17
 118:	cf 93       	push	r28
 11a:	df 93       	push	r29
 11c:	cd b7       	in	r28, 0x3d	; 61
 11e:	de b7       	in	r29, 0x3e	; 62
 120:	61 97       	sbiw	r28, 0x11	; 17
 122:	0f b6       	in	r0, 0x3f	; 63
 124:	f8 94       	cli
 126:	de bf       	out	0x3e, r29	; 62
 128:	0f be       	out	0x3f, r0	; 63
 12a:	cd bf       	out	0x3d, r28	; 61
	unsigned char j = 0, b[] = {"LED2 TURNED ON!\r"};
 12c:	81 e1       	ldi	r24, 0x11	; 17
 12e:	e1 e7       	ldi	r30, 0x71	; 113
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	de 01       	movw	r26, r28
 134:	11 96       	adiw	r26, 0x01	; 1
 136:	01 90       	ld	r0, Z+
 138:	0d 92       	st	X+, r0
 13a:	8a 95       	dec	r24
 13c:	e1 f7       	brne	.-8      	; 0x136 <data3+0x20>
 13e:	10 e0       	ldi	r17, 0x00	; 0
	
	while(b[j] != '\0')
 140:	03 c0       	rjmp	.+6      	; 0x148 <data3+0x32>
	{
		uart_transmit(b[j]);
 142:	0e 94 4a 00 	call	0x94	; 0x94 <uart_transmit>
		j++;
 146:	1f 5f       	subi	r17, 0xFF	; 255

void data3()
{
	unsigned char j = 0, b[] = {"LED2 TURNED ON!\r"};
	
	while(b[j] != '\0')
 148:	e1 e0       	ldi	r30, 0x01	; 1
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	ec 0f       	add	r30, r28
 14e:	fd 1f       	adc	r31, r29
 150:	e1 0f       	add	r30, r17
 152:	f1 1d       	adc	r31, r1
 154:	80 81       	ld	r24, Z
 156:	81 11       	cpse	r24, r1
 158:	f4 cf       	rjmp	.-24     	; 0x142 <data3+0x2c>
	{
		uart_transmit(b[j]);
		j++;
	}
	
	DDRA = 0xff;
 15a:	8f ef       	ldi	r24, 0xFF	; 255
 15c:	8a bb       	out	0x1a, r24	; 26
	
	PORTA = 0x80;
 15e:	80 e8       	ldi	r24, 0x80	; 128
 160:	8b bb       	out	0x1b, r24	; 27
 162:	2f ef       	ldi	r18, 0xFF	; 255
 164:	89 e6       	ldi	r24, 0x69	; 105
 166:	98 e1       	ldi	r25, 0x18	; 24
 168:	21 50       	subi	r18, 0x01	; 1
 16a:	80 40       	sbci	r24, 0x00	; 0
 16c:	90 40       	sbci	r25, 0x00	; 0
 16e:	e1 f7       	brne	.-8      	; 0x168 <data3+0x52>
 170:	00 c0       	rjmp	.+0      	; 0x172 <data3+0x5c>
 172:	00 00       	nop
	_delay_ms(1000);
}
 174:	61 96       	adiw	r28, 0x11	; 17
 176:	0f b6       	in	r0, 0x3f	; 63
 178:	f8 94       	cli
 17a:	de bf       	out	0x3e, r29	; 62
 17c:	0f be       	out	0x3f, r0	; 63
 17e:	cd bf       	out	0x3d, r28	; 61
 180:	df 91       	pop	r29
 182:	cf 91       	pop	r28
 184:	1f 91       	pop	r17
 186:	08 95       	ret

00000188 <main>:

int main(void)
{
 188:	cf 93       	push	r28
 18a:	df 93       	push	r29
 18c:	cd b7       	in	r28, 0x3d	; 61
 18e:	de b7       	in	r29, 0x3e	; 62
 190:	6d 97       	sbiw	r28, 0x1d	; 29
 192:	0f b6       	in	r0, 0x3f	; 63
 194:	f8 94       	cli
 196:	de bf       	out	0x3e, r29	; 62
 198:	0f be       	out	0x3f, r0	; 63
 19a:	cd bf       	out	0x3d, r28	; 61
    /* Replace with your application code */
		
    unsigned char i = 0, a[] = {"Hello Everyone Welcome to: \r"};
 19c:	8d e1       	ldi	r24, 0x1D	; 29
 19e:	e2 e8       	ldi	r30, 0x82	; 130
 1a0:	f0 e0       	ldi	r31, 0x00	; 0
 1a2:	de 01       	movw	r26, r28
 1a4:	11 96       	adiw	r26, 0x01	; 1
 1a6:	01 90       	ld	r0, Z+
 1a8:	0d 92       	st	X+, r0
 1aa:	8a 95       	dec	r24
 1ac:	e1 f7       	brne	.-8      	; 0x1a6 <main+0x1e>
    unsigned char d;

	
	
	uart_init();  //initialize UART
 1ae:	0e 94 41 00 	call	0x82	; 0x82 <uart_init>

int main(void)
{
    /* Replace with your application code */
		
    unsigned char i = 0, a[] = {"Hello Everyone Welcome to: \r"};
 1b2:	10 e0       	ldi	r17, 0x00	; 0

	
	
	uart_init();  //initialize UART
	
	while(a[i] != '\0')
 1b4:	03 c0       	rjmp	.+6      	; 0x1bc <main+0x34>
    {
	    uart_transmit(a[i]);
 1b6:	0e 94 4a 00 	call	0x94	; 0x94 <uart_transmit>
	    i++;
 1ba:	1f 5f       	subi	r17, 0xFF	; 255

	
	
	uart_init();  //initialize UART
	
	while(a[i] != '\0')
 1bc:	e1 e0       	ldi	r30, 0x01	; 1
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	ec 0f       	add	r30, r28
 1c2:	fd 1f       	adc	r31, r29
 1c4:	e1 0f       	add	r30, r17
 1c6:	f1 1d       	adc	r31, r1
 1c8:	80 81       	ld	r24, Z
 1ca:	81 11       	cpse	r24, r1
 1cc:	f4 cf       	rjmp	.-24     	; 0x1b6 <main+0x2e>
	    i++;
    }
	
	while(1)
	{
		d = uart_receive();
 1ce:	0e 94 4e 00 	call	0x9c	; 0x9c <uart_receive>
		     
		if(d == 'A')
 1d2:	81 34       	cpi	r24, 0x41	; 65
 1d4:	19 f4       	brne	.+6      	; 0x1dc <main+0x54>
		{				
            data2();
 1d6:	0e 94 52 00 	call	0xa4	; 0xa4 <data2>
 1da:	f9 cf       	rjmp	.-14     	; 0x1ce <main+0x46>
		}		
		
		else if(d== 'B')
 1dc:	82 34       	cpi	r24, 0x42	; 66
 1de:	b9 f7       	brne	.-18     	; 0x1ce <main+0x46>
		{
			data3();		
 1e0:	0e 94 8b 00 	call	0x116	; 0x116 <data3>
 1e4:	f4 cf       	rjmp	.-24     	; 0x1ce <main+0x46>

000001e6 <_exit>:
 1e6:	f8 94       	cli

000001e8 <__stop_program>:
 1e8:	ff cf       	rjmp	.-2      	; 0x1e8 <__stop_program>
