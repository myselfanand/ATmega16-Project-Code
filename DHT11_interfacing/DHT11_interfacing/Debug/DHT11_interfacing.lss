
DHT11_interfacing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000136  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000136  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000168  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007ca  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000061c  00000000  00000000  00000996  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000029f  00000000  00000000  00000fb2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001254  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000034d  00000000  00000000  00001288  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000195  00000000  00000000  000015d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000176a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 47 00 	call	0x8e	; 0x8e <main>
  64:	0c 94 6f 00 	jmp	0xde	; 0xde <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <lcd_cmd>:


void lcd_cmd(unsigned char cmd)
{

	PORTB = cmd;
  6c:	88 bb       	out	0x18, r24	; 24
	
	PORTA = 0x04;
  6e:	84 e0       	ldi	r24, 0x04	; 4
  70:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  72:	8f e2       	ldi	r24, 0x2F	; 47
  74:	95 e7       	ldi	r25, 0x75	; 117
  76:	01 97       	sbiw	r24, 0x01	; 1
  78:	f1 f7       	brne	.-4      	; 0x76 <lcd_cmd+0xa>
  7a:	00 c0       	rjmp	.+0      	; 0x7c <lcd_cmd+0x10>
  7c:	00 00       	nop
	_delay_ms(10);
	
	PORTA = 0x00;
  7e:	1b ba       	out	0x1b, r1	; 27
  80:	8f e2       	ldi	r24, 0x2F	; 47
  82:	95 e7       	ldi	r25, 0x75	; 117
  84:	01 97       	sbiw	r24, 0x01	; 1
  86:	f1 f7       	brne	.-4      	; 0x84 <lcd_cmd+0x18>
  88:	00 c0       	rjmp	.+0      	; 0x8a <lcd_cmd+0x1e>
  8a:	00 00       	nop
  8c:	08 95       	ret

0000008e <main>:
}


int main(void)
{
   DDRA = 0xFF;
  8e:	8f ef       	ldi	r24, 0xFF	; 255
  90:	8a bb       	out	0x1a, r24	; 26
   DDRB = 0xFF;
  92:	87 bb       	out	0x17, r24	; 23
   
   lcd_cmd(0x38); //initialize the LCD
  94:	88 e3       	ldi	r24, 0x38	; 56
  96:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
  9a:	8f e2       	ldi	r24, 0x2F	; 47
  9c:	95 e7       	ldi	r25, 0x75	; 117
  9e:	01 97       	sbiw	r24, 0x01	; 1
  a0:	f1 f7       	brne	.-4      	; 0x9e <main+0x10>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <main+0x16>
  a4:	00 00       	nop
   _delay_ms(10);
   
   lcd_cmd(0x0E); // displaying on cursor
  a6:	8e e0       	ldi	r24, 0x0E	; 14
  a8:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
  ac:	8f e2       	ldi	r24, 0x2F	; 47
  ae:	95 e7       	ldi	r25, 0x75	; 117
  b0:	01 97       	sbiw	r24, 0x01	; 1
  b2:	f1 f7       	brne	.-4      	; 0xb0 <main+0x22>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <main+0x28>
  b6:	00 00       	nop
   _delay_ms(10);
   
   lcd_cmd(0x01);  //clear screen
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
  be:	8f e2       	ldi	r24, 0x2F	; 47
  c0:	95 e7       	ldi	r25, 0x75	; 117
  c2:	01 97       	sbiw	r24, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <main+0x34>
  c6:	00 c0       	rjmp	.+0      	; 0xc8 <main+0x3a>
  c8:	00 00       	nop
   _delay_ms(10);
   
   lcd_cmd(0x80); // start cursor at beginning
  ca:	80 e8       	ldi	r24, 0x80	; 128
  cc:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
  d0:	8f e2       	ldi	r24, 0x2F	; 47
  d2:	95 e7       	ldi	r25, 0x75	; 117
  d4:	01 97       	sbiw	r24, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <main+0x46>
  d8:	00 c0       	rjmp	.+0      	; 0xda <main+0x4c>
  da:	00 00       	nop
  dc:	ff cf       	rjmp	.-2      	; 0xdc <main+0x4e>

000000de <_exit>:
  de:	f8 94       	cli

000000e0 <__stop_program>:
  e0:	ff cf       	rjmp	.-2      	; 0xe0 <__stop_program>
