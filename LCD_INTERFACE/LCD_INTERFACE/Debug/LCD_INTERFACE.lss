
LCD_INTERFACE.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000011c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000170  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001a0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000895  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000616  00000000  00000000  00000aa1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002f1  00000000  00000000  000010b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000013a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000034e  00000000  00000000  000013ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002b5  00000000  00000000  0000173a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000019ef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 5a 00 	call	0xb4	; 0xb4 <main>
  64:	0c 94 8c 00 	jmp	0x118	; 0x118 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <lcd_cmd>:
#include <util/delay.h>

void lcd_cmd(unsigned char cmd)
{

	PORTB = cmd;
  6c:	88 bb       	out	0x18, r24	; 24
	
	PORTA = 0x04;
  6e:	84 e0       	ldi	r24, 0x04	; 4
  70:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  72:	8f e2       	ldi	r24, 0x2F	; 47
  74:	95 e7       	ldi	r25, 0x75	; 117
  76:	01 97       	sbiw	r24, 0x01	; 1
  78:	f1 f7       	brne	.-4      	; 0x76 <lcd_cmd+0xa>
  7a:	00 c0       	rjmp	.+0      	; 0x7c <lcd_cmd+0x10>
  7c:	00 00       	nop
	_delay_ms(10);
	
	PORTA = 0x00;
  7e:	1b ba       	out	0x1b, r1	; 27
  80:	8f e2       	ldi	r24, 0x2F	; 47
  82:	95 e7       	ldi	r25, 0x75	; 117
  84:	01 97       	sbiw	r24, 0x01	; 1
  86:	f1 f7       	brne	.-4      	; 0x84 <lcd_cmd+0x18>
  88:	00 c0       	rjmp	.+0      	; 0x8a <lcd_cmd+0x1e>
  8a:	00 00       	nop
  8c:	08 95       	ret

0000008e <lcd_data>:
	_delay_ms(10);	
}

void lcd_data()
{
	PORTB = 'A';
  8e:	81 e4       	ldi	r24, 0x41	; 65
  90:	88 bb       	out	0x18, r24	; 24
	
	PORTA = 0x05;
  92:	85 e0       	ldi	r24, 0x05	; 5
  94:	8b bb       	out	0x1b, r24	; 27
  96:	8f e2       	ldi	r24, 0x2F	; 47
  98:	95 e7       	ldi	r25, 0x75	; 117
  9a:	01 97       	sbiw	r24, 0x01	; 1
  9c:	f1 f7       	brne	.-4      	; 0x9a <lcd_data+0xc>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <lcd_data+0x12>
  a0:	00 00       	nop
	_delay_ms(10);
	
	PORTA = 0X01;
  a2:	81 e0       	ldi	r24, 0x01	; 1
  a4:	8b bb       	out	0x1b, r24	; 27
  a6:	8f e2       	ldi	r24, 0x2F	; 47
  a8:	95 e7       	ldi	r25, 0x75	; 117
  aa:	01 97       	sbiw	r24, 0x01	; 1
  ac:	f1 f7       	brne	.-4      	; 0xaa <lcd_data+0x1c>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <lcd_data+0x22>
  b0:	00 00       	nop
  b2:	08 95       	ret

000000b4 <main>:
}

int main(void)
{
    /* Replace with your application code */
	DDRA = 0xFF;
  b4:	8f ef       	ldi	r24, 0xFF	; 255
  b6:	8a bb       	out	0x1a, r24	; 26
	DDRB = 0xFF;
  b8:	87 bb       	out	0x17, r24	; 23
	
	lcd_cmd(0x38); //initialize the LCD
  ba:	88 e3       	ldi	r24, 0x38	; 56
  bc:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
  c0:	8f e2       	ldi	r24, 0x2F	; 47
  c2:	95 e7       	ldi	r25, 0x75	; 117
  c4:	01 97       	sbiw	r24, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <main+0x10>
  c8:	00 c0       	rjmp	.+0      	; 0xca <main+0x16>
  ca:	00 00       	nop
	_delay_ms(10);
	
	lcd_cmd(0x0E); // displaying on cursor
  cc:	8e e0       	ldi	r24, 0x0E	; 14
  ce:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
  d2:	8f e2       	ldi	r24, 0x2F	; 47
  d4:	95 e7       	ldi	r25, 0x75	; 117
  d6:	01 97       	sbiw	r24, 0x01	; 1
  d8:	f1 f7       	brne	.-4      	; 0xd6 <main+0x22>
  da:	00 c0       	rjmp	.+0      	; 0xdc <main+0x28>
  dc:	00 00       	nop
	_delay_ms(10);
	
	lcd_cmd(0x01);  // clear display
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
  e4:	8f e2       	ldi	r24, 0x2F	; 47
  e6:	95 e7       	ldi	r25, 0x75	; 117
  e8:	01 97       	sbiw	r24, 0x01	; 1
  ea:	f1 f7       	brne	.-4      	; 0xe8 <main+0x34>
  ec:	00 c0       	rjmp	.+0      	; 0xee <main+0x3a>
  ee:	00 00       	nop
	_delay_ms(10);
	
	lcd_cmd(0x80); // start cursor at beginning
  f0:	80 e8       	ldi	r24, 0x80	; 128
  f2:	0e 94 36 00 	call	0x6c	; 0x6c <lcd_cmd>
  f6:	8f e2       	ldi	r24, 0x2F	; 47
  f8:	95 e7       	ldi	r25, 0x75	; 117
  fa:	01 97       	sbiw	r24, 0x01	; 1
  fc:	f1 f7       	brne	.-4      	; 0xfa <main+0x46>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <main+0x4c>
 100:	00 00       	nop
	_delay_ms(10);
	
	lcd_data();
 102:	0e 94 47 00 	call	0x8e	; 0x8e <lcd_data>
 106:	8f e2       	ldi	r24, 0x2F	; 47
 108:	95 e7       	ldi	r25, 0x75	; 117
 10a:	01 97       	sbiw	r24, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <main+0x56>
 10e:	00 c0       	rjmp	.+0      	; 0x110 <main+0x5c>
 110:	00 00       	nop
	_delay_ms(10);	
}
 112:	80 e0       	ldi	r24, 0x00	; 0
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	08 95       	ret

00000118 <_exit>:
 118:	f8 94       	cli

0000011a <__stop_program>:
 11a:	ff cf       	rjmp	.-2      	; 0x11a <__stop_program>
